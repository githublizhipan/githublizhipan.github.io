<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STL</title>
      <link href="/2020/08/17/c++/10.STL/"/>
      <url>/2020/08/17/c++/10.STL/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>通常来讲，从容器c获得一对迭代器的方法就是<code>std::begin(c)</code>和<code>std::end(c)</code>。我们还有<code>std::cbegin</code>、<code>std::rbegin</code>和<code>std::crbegin</code>，以及对应的end函数，来分别得到<code>const</code>或非<code>const</code>的、正序或反序迭代器。</p><h1 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h1><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p><code>stack</code>主要函数有：</p><ul><li><code>top</code>：返回栈顶</li><li><code>push</code>：入栈</li><li><code>pop</code>：出栈</li><li><code>empty</code>：看看是不是空的</li><li><code>size</code>：容器里到底有多少东西</li></ul><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p><code>queue</code>主要的函数有：</p><ul><li><code>front</code>：返回队头</li><li><code>back</code>：返回队尾</li><li><code>push</code>：入列</li><li><code>pop</code>：出列</li><li><code>empty</code>：看看是不是空的</li><li><code>size</code>：容器里到底有多少东西</li></ul><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p><code>list</code>主要的函数有：</p><ul><li><p><code>push_front</code>、<code>push_back</code>：往链表头或者链表尾插入数据</p></li><li><p><code>pop_front</code>、<code>pop_back</code>：从链表头或者链表尾里拿走数据</p></li><li><p><code>size</code>：容器里到底有多少东西</p></li></ul><h1 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h1><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><code>map</code>主要的函数有：</p><ul><li><p><code>insert</code>：插入一个pair，如果key已经存在的话那么返回值的第二项是false</p></li><li><p><code>find</code>：查找一个key</p></li><li><p><code>erase</code>：删除一个key</p></li><li><p><code>clear</code>：清空map</p></li><li><p><code>count</code>：返回key的数量</p></li></ul><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p><code>set</code>主要的函数有：</p><ul><li><p><code>insert</code>：插入一个key，如果key已经存在的话那么返回值的第二项是false</p></li><li><p><code>find</code>：查找一个key</p></li><li><p><code>erase</code>：删除一个key</p></li><li><p><code>clear</code>：清空map</p></li><li><p><code>count</code>：返回key的数量</p></li></ul><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><p><code>priority_queue</code>主要的函数有：</p><ul><li><code>push</code>：插入一个对象并排序</li><li><code>pop</code>：弹出对首对象。如果不指定比较方式的话，priority_queue会默认使用小于号来比较，那么pop总是弹出最大的那个。</li><li><code>top</code>：返回队头</li><li><code>size</code>：返回对象的数量</li><li><code>empty</code>：返回是否为空</li></ul><h1 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h1><h2 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a><a href="http://www.cplusplus.com/reference/numeric/accumulate/">accumulate</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">accumulate</span> (<span class="title">InputIterator</span> <span class="title">first</span>, <span class="title">InputIterator</span> <span class="title">last</span>, <span class="title">T</span> <span class="title">init</span>) &#123;</span></span><br><span class="line">  <span class="keyword">while</span> (first!=last) &#123;</span><br><span class="line">    init = init + *first;  <span class="comment">// or: init=binary_op(init,*first) for the binary_op version</span></span><br><span class="line">    ++first;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> init;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*first、last为迭代器， init为累加器的初始值。*/</span></span><br></pre></td></tr></table></figure><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a><a href="http://www.cplusplus.com/reference/algorithm/transform/?kw=transform">transform</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">InputIterator</span>, <span class="title">class</span> <span class="title">OutputIterator</span>, <span class="title">class</span> <span class="title">UnaryOperator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">OutputIterator</span> <span class="title">transform</span> (<span class="title">InputIterator</span> <span class="title">first1</span>, <span class="title">InputIterator</span> <span class="title">last1</span>, <span class="title">OutputIterator</span> <span class="title">result</span>, <span class="title">UnaryOperator</span> <span class="title">op</span>) &#123;</span></span><br><span class="line">  <span class="keyword">while</span> (first1 != last1) &#123;</span><br><span class="line">    *result = op(*first1);  <span class="comment">// or: *result=binary_op(*first1,*first2++);</span></span><br><span class="line">    ++result; ++first1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题：计算标准差</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; xs&#123; <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">10</span> &#125;;</span><br><span class="line">    <span class="comment">/* 请在这里插入代码 */</span></span><br><span class="line">    <span class="keyword">auto</span> sum = accumulate(<span class="built_in">begin</span>(xs), <span class="built_in">end</span>(xs), <span class="number">0.0</span>, plus&lt;<span class="keyword">double</span>&gt;());</span><br><span class="line">    <span class="keyword">auto</span> average = sum / xs.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">auto</span> sumOfSquares = accumulate(</span><br><span class="line">        <span class="built_in">begin</span>(xs), </span><br><span class="line">        transform(<span class="built_in">begin</span>(xs), <span class="built_in">end</span>(xs), <span class="built_in">begin</span>(xs), [](<span class="keyword">auto</span> x)&#123; <span class="keyword">return</span> x * x; &#125;),</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        plus&lt;<span class="keyword">double</span>&gt;()</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">sqrt</span>(sumOfSquares / xs.<span class="built_in">size</span>() - average*average) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> c++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/08/17/c++/9.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/17/c++/9.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> c++ </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++计蒜客答疑</title>
      <link href="/2020/08/17/c++/8.%E8%AE%A1%E8%92%9C%E5%AE%A2%E7%AD%94%E7%96%91/"/>
      <url>/2020/08/17/c++/8.%E8%AE%A1%E8%92%9C%E5%AE%A2%E7%AD%94%E7%96%91/</url>
      
        <content type="html"><![CDATA[<h1 id="c-类型转换的四种方法"><a href="#c-类型转换的四种方法" class="headerlink" title="c++类型转换的四种方法"></a>c++类型转换的四种方法</h1><ul><li><p><strong><code>    dynamic_cast</code></strong></p><p>  将父类指针转换为子类指针。</p><p>  使用这个功能的前提是，父类（或者他的父类——如果有的话）必须至少要包含一个<code>virtual</code>函数。</p><p>  转换失败返回<code>nullptr</code></p><p>  原理：通过对比虚函数表地址，每个类都有自己的虚函数表</p></li><li><p><strong><code>static_cast</code></strong></p><p>  当然你也可以使用<code>static_cast</code>。它跟<code>dynamic_cast</code>的区别就是，他不回去检查<code>pAnimal</code>到底是不是<code>Cat</code>，就直接转换给你。如果不是的话，你就会拿到一个野指针，使用它就会发生 <code>undefined behavior</code>。</p><p>  另外要提到的是，<code>dynamic_cast</code>也可以在父类的几个子类下转换，如果不返回<code>nullptr</code>就代表你的转换成功了，这个指针指向的的确是你需要的类型的对象。而<code>static_cast</code>这样做会有语法错误。</p></li><li><p><strong><code>const_cast</code></strong></p></li><li><p><strong><code>reinterpret_cast</code></strong></p></li></ul><h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><p><strong>可调用对象</strong>：</p><ul><li><p>函数</p></li><li><p>函数对象</p></li><li><p>lambda表达式</p></li></ul><p> <code>auto a = [](int a, int b) &#123; return a + b; &#125;; </code></p><p><strong>解释：</strong></p><ul><li><p>每一个 lambda 表达式类型都不同，因此<code>auto</code>不能少，编译器会推导类型</p><p>  也可以用返回值后置来指定返回值类型</p></li><li><p><code>[]</code>装的是外部变量, 捕获行为</p><ul><li>[n]  :  值捕获</li><li>[&amp;n] : 引用捕获</li><li>[=] : 以值捕获形式捕获外部所有变量</li><li>[&amp;] : 以引用捕获形式捕获外部所有变量</li></ul></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://wx2.sbimg.cn/2020/08/17/3caRT.png" alt="3caRT.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可调用对象：函数、函数对象、lambda表达式</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回值类型自动推导</span></span><br><span class="line">    <span class="keyword">auto</span> a = [](<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123; <span class="keyword">return</span> a + b; &#125;;  <span class="comment">//lambda是个对象就是个值，赋值语句不要忘加分号</span></span><br><span class="line">    <span class="keyword">auto</span> b = [](<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line">    <span class="comment">//每一个 lambda 表达式类型都不同</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(a).name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(b).name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a(<span class="number">231</span>, <span class="number">64</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值后置，指定返回值类型</span></span><br><span class="line">    <span class="keyword">auto</span> c = [](<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; <span class="keyword">double</span> &#123; </span><br><span class="line">        <span class="keyword">double</span> c = <span class="number">12.5</span>;</span><br><span class="line">        <span class="keyword">if</span> (rand() % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//可调用对象：函数、函数对象、lambda表达式</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">auto</span> a = [=](<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123; <span class="keyword">return</span> a + b + n; &#125;;  <span class="comment">//lambda是个对象就是个值，赋值语句不要忘加分号</span></span><br><span class="line">    </span><br><span class="line">    n = <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">auto</span> b = [n](<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123; <span class="keyword">return</span> a + b + n; &#125;;</span><br><span class="line">    <span class="comment">//每一个 lambda 表达式类型都不同</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(a).name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(b).name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值后置，指定返回值类型</span></span><br><span class="line">    <span class="keyword">auto</span> c = [](<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; <span class="keyword">double</span> &#123; </span><br><span class="line">        <span class="keyword">double</span> c = <span class="number">12.5</span>;</span><br><span class="line">        <span class="keyword">if</span> (rand() % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//lambda 表达式可以传入可调用对象也可返回可调用对象</span></span><br><span class="line">    <span class="keyword">auto</span> d = [](function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; a, function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> [=](<span class="keyword">int</span> x) &#123;</span><br><span class="line">            <span class="keyword">return</span> a(x, x) + b(x, x);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">auto</span> e = d(a, b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; e(<span class="number">12</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> f = d(add, mul);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用placement-new和move实现-Vector"><a href="#使用placement-new和move实现-Vector" class="headerlink" title="使用placement new和move实现 Vector"></a>使用<code>placement new</code>和<code>move</code>实现 <code>Vector</code></h1><p>这一次我们要用之前学习过的关于右值引用和<code>std::move</code>的相关知识，自行实现一个<code>Vector</code>。除此之外，我们还会向大家介绍一个新的知识：“定位放置（placement new)”。</p><p>对于已经学习过《C++ 程序设计》的同学，应该知道<code>new</code>运算符的使用方法——而<code>placement new</code>则是<code>new</code>运算符的一种变种。跟 C 语言中的<code>malloc</code>函数不同，<code>new</code>的作用是，首先分配一片大小足够的内存，然后在这片内存上调用指定的构造函数，构造一个对象。而<code>placement new</code>则是在指定的一片分配好的内存上，对对象进行构造。</p><p>在这一节，我们将会使用<code>placement new</code>，配合<code>std::move</code>来进行对象构造，并且完成一个<code>Vector</code>类——在《C++ 程序设计》最后一章的实验中，大家应该已经试着自己实现过一个<code>Vector</code>类。而这一节我们要实现的<code>Vector</code>类则更加复杂，功能更多，而且效率更高。</p><p><code>placement new</code>的使用方法如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span>(位置)Object(构造函数的参数)</span><br></pre></td></tr></table></figure><p>具体到这次我们要实现的<code>Vector</code>类，在测试中，我们会使用它来填充元素<code>Element</code>——它在调用不同的构造函数的时候，会输出不同的文字信息。大家需要正确使用<code>std::move</code>，调用正确的构造函数，才能得到正确的结果。</p><p><code>Element</code>类的定义，<code>Vector</code>类的框架与几个构造函数，都已经给出——其中<code>Vector</code>类包含一个指针变量成员<code>items</code>和一个整形变量成员<code>count</code>，分别用来保存堆对象的位置，以及当前已经储存的元素个数。大家需要实现<code>Vector</code>的右值引用构造函数与析构函数，以及以下几个成员函数：</p><ul><li><code>void Add(const T&amp; item)</code>这个函数类似于<code>std::vector</code>提供的<code>push_back</code>方法，作用是向当前元素数组的末尾添加一个新的元素——如果内存空间不足的话你就需要对内存进行重新分配，不能让<code>Vector</code>类的使用者自己去考虑数组是否会越界的问题。</li><li><code>bool Insert(const T&amp; item,int index)</code>向索引<code>index</code>的位置插入元素——然后将<code>index</code>后面的元素依次向后移动一个位置。同样，你需要自己处理内存空间问题。除此之外，你还要检查索引是否合法——如果合法则返回<code>true</code>，不合法则直接返回<code>false</code>，不执行任何操作。</li><li><code>bool Remove(int index)</code>删除索引<code>index</code>位置的元素，并且将<code>index</code>后面的所有元素向前移动一位。其他细节跟<code>Insert</code>函数保持一致。</li><li><code>int Contains(const T&amp; item)</code>遍历整个数组，看是否包含元素<code>item</code>。如果包含则返回<code>item</code>的索引，如果不包含则返回<code>-1</code></li><li><code>void Clear()</code>清除<code>Vector</code>的所有元素，将指针置为<code>nullptr</code>，将计数器归零——注意为了避免内存泄漏，**<code>Clear()</code>和<code>Vector</code>的析构函数必须要先调用所有元素的析构函数再对堆内存进行<code>free</code>**</li></ul><p>所有成员函数在修改了元素个数的时候，都必须同步更新<code>count</code>。</p><p><strong>主函数、<code>Element</code>和<code>Vector</code>框架都已经给出并锁定，你不能更改它们。</strong></p><p><strong>样例输入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">ctor</span><br><span class="line">copy ctor</span><br><span class="line">dtor</span><br><span class="line">ctor</span><br><span class="line">right value ctor</span><br><span class="line">copy ctor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">ctor</span><br><span class="line">right value ctor</span><br><span class="line">right value ctor</span><br><span class="line">copy ctor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">ctor</span><br><span class="line">right value ctor</span><br><span class="line">right value ctor</span><br><span class="line">right value ctor</span><br><span class="line">copy ctor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">0 1 2 3 </span><br><span class="line">ctor</span><br><span class="line">right value ctor</span><br><span class="line">right value ctor</span><br><span class="line">copy ctor</span><br><span class="line">right value ctor</span><br><span class="line">right value ctor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">0 1 4 2 3 </span><br><span class="line">right value ctor</span><br><span class="line">right value ctor</span><br><span class="line">right value ctor</span><br><span class="line">right value ctor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">0 1 2 3 </span><br><span class="line">ctor</span><br><span class="line">ctor</span><br><span class="line">1</span><br><span class="line">-1</span><br><span class="line">0 1 2 3 </span><br><span class="line">copy ctor</span><br><span class="line">1 </span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br><span class="line">dtor</span><br></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> number;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Element() :number(<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ctor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      Element(<span class="keyword">int</span> num):number(num) &#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ctor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      Element(<span class="keyword">const</span> Element&amp; e):number(e.number) &#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;copy ctor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      Element(Element&amp;&amp; e):number(e.number) &#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;right value ctor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ~Element() &#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;dtor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> Element&amp; item) &#123;</span><br><span class="line">          number = item.number;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Element&amp; item) &#123;</span><br><span class="line">          <span class="keyword">return</span> (number == item.number);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; number ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">GetNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> number;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">      T* items;</span><br><span class="line">      <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">      Vector() :count&#123; <span class="number">0</span> &#125;, items&#123;<span class="literal">nullptr</span>&#125; &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      Vector(<span class="keyword">const</span> Vector&amp; <span class="built_in">vector</span>) :count&#123;<span class="built_in">vector</span>.count&#125; &#123;</span><br><span class="line">          items = <span class="keyword">static_cast</span>&lt;T*&gt;(<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(T) * count));</span><br><span class="line">          <span class="built_in">memcpy</span>(items, <span class="built_in">vector</span>.items, <span class="keyword">sizeof</span>(T) * count);</span><br><span class="line">      &#125;</span><br><span class="line">      Vector(Vector&amp;&amp; <span class="built_in">vector</span>) :count&#123; <span class="built_in">vector</span>.count &#125;, items&#123; <span class="built_in">vector</span>.items &#125; &#123;</span><br><span class="line">          <span class="built_in">vector</span>.items = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">vector</span>.count = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ~Vector() &#123;</span><br><span class="line">          Clear();</span><br><span class="line">      &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> index)&#123;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;<span class="number">0</span>||index&gt;=count) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;invalid index&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> items[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> items[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">returnCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            items[i].~T();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(items);</span><br><span class="line">        items = <span class="literal">nullptr</span>;</span><br><span class="line">          count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">const</span> T&amp; item)</span> </span>&#123;</span><br><span class="line">          T *new_store = (T *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(T) * (count + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span>(new_store + i)T(<span class="built_in">std</span>::<span class="built_in">move</span>(items[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span>(new_store + count)T(item);</span><br><span class="line">          <span class="keyword">int</span> pre = count + <span class="number">1</span>;</span><br><span class="line">        Clear();</span><br><span class="line">        count = pre;</span><br><span class="line">        items = new_store;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(<span class="keyword">const</span> T&amp; item,<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; count) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        T *new_store = (T *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(T) * (count + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = count - <span class="number">1</span>; i &gt;= index; i--) &#123;</span><br><span class="line">            <span class="keyword">new</span>(new_store + i + <span class="number">1</span>)T(<span class="built_in">std</span>::<span class="built_in">move</span>(items[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span>(new_store + index)T(item);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span>(new_store + i)T(<span class="built_in">std</span>::<span class="built_in">move</span>(items[i]));</span><br><span class="line">        &#125;</span><br><span class="line">          <span class="keyword">int</span> pre = count + <span class="number">1</span>;</span><br><span class="line">        Clear();</span><br><span class="line">        count = pre;</span><br><span class="line">        items = new_store;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">bool</span> <span class="title">Remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; count) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        T *new_store;</span><br><span class="line">        <span class="keyword">if</span> (count - <span class="number">1</span>) new_store = (T *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(T) * (count - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> new_store = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == index) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; index) <span class="keyword">new</span>(new_store + i)T(<span class="built_in">std</span>::<span class="built_in">move</span>(items[i]));</span><br><span class="line">            <span class="keyword">if</span> (i &gt; index) <span class="keyword">new</span>(new_store + i - <span class="number">1</span>)T(<span class="built_in">std</span>::<span class="built_in">move</span>(items[i]));</span><br><span class="line">        &#125;</span><br><span class="line">          <span class="keyword">int</span> pre = count - <span class="number">1</span>;</span><br><span class="line">        Clear();</span><br><span class="line">        count = pre;</span><br><span class="line">        items = new_store;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">Contains</span><span class="params">(<span class="keyword">const</span> T&amp; item)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (items[i] == item) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintVector</span><span class="params">(Vector&lt;T&gt;&amp; v)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> count=v.returnCount();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">      &#123;</span><br><span class="line">          v[i]();</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Vector&lt;Element&gt;v;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">          <span class="function">Element <span class="title">e</span><span class="params">(i)</span></span>;</span><br><span class="line">          v.Add(e);</span><br><span class="line">      &#125;</span><br><span class="line">      PrintVector(v);</span><br><span class="line">      <span class="function">Element <span class="title">e2</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">      <span class="keyword">if</span> (!v.Insert(e2, <span class="number">10</span>))</span><br><span class="line">      &#123;</span><br><span class="line">          v.Insert(e2, <span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      PrintVector(v);</span><br><span class="line">      <span class="keyword">if</span> (!v.Remove(<span class="number">10</span>))</span><br><span class="line">      &#123;</span><br><span class="line">          v.Remove(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      PrintVector(v);</span><br><span class="line">      Element e3(1), e4(10);</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; v.Contains(e3) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; v.Contains(e4) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      Vector&lt;Element&gt;v2(v);</span><br><span class="line">      Vector&lt;Element&gt;v3(<span class="built_in">move</span>(v2));</span><br><span class="line">      PrintVector(v3);</span><br><span class="line">      v2.Add(e3);</span><br><span class="line">      PrintVector(v2);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++线程池的实现</title>
      <link href="/2020/08/13/c++/7.%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2020/08/13/c++/7.%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p> <img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/13/d9nx9e.png" alt="d9nx9e.png"></p><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><ul><li><strong>临界区资源</strong>：（多线程同时操作的操作的资源）， 任务队列</li><li><strong>线程安全</strong>：一个资源在多线程同时操作时不出错就是安全的</li><li><strong>非线程安全的临界资源</strong>：一个资源在多线程同时操作情况下会出现读写错误（STL基本都是非线程安全的）</li><li><strong>线程同步</strong>：</li><li><strong>原子操作</strong>：某一操作过程中不会插入其他操作（加锁把操）</li></ul><h1 id="线程池初步框架"><a href="#线程池初步框架" class="headerlink" title="线程池初步框架"></a>线程池初步框架</h1><ol><li><p><strong>封装任务类：</strong></p><p> 任务类中有个<code>function</code>对象属性、接收<code>bind</code>绑定的函数或函数对象</p></li><li><p><strong>封装线程池：</strong></p><p> 三大步骤:</p><ul><li><p><code>start</code> </p><p>  启动线程池，这里面去<code>new</code> 给定数量的<code>thread</code>对象，每个线程绑定成员方法<code>worker</code></p></li><li><p><code>worker</code></p><ul><li>取任务<code>get_one_task</code></li><li>执行任务</li><li>释放任务</li></ul></li><li><p><code>stop</code></p><p>  回收线程、清空线程池</p></li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 封装一个任务类，</span></span><br><span class="line"><span class="comment"> 通过 bind 将 方法(函数)名和参数绑定在一起, 完成一个任务的封装</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line">    <span class="built_in">Task</span>(T func, ARGS... args) &#123;</span><br><span class="line">        <span class="comment">//forward 使参数按照原来的类型向前传递</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;func = <span class="built_in">std</span>::bind(func, forward&lt;ARGS&gt;(args)...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;func();</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    function&lt;<span class="keyword">void</span>()&gt; func;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_func1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_func2</span><span class="params">(<span class="keyword">int</span> &amp;n)</span> </span>&#123;</span><br><span class="line">    n += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ThreadPool(<span class="keyword">int</span> n = <span class="number">5</span>) </span><br><span class="line">    : is_running(<span class="literal">false</span>), max_threads_num(n) &#123;  &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_running) <span class="keyword">return</span> ;</span><br><span class="line">        is_running = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化线程池对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;max_threads_num; i++) &#123;</span><br><span class="line">            <span class="comment">//以成员方法作为入口, 参数不要忘记隐藏的this</span></span><br><span class="line">            <span class="comment">//正常函数传入到 thread()中，直接传入函数名即函数指针，但传入成员方法需要对方法取地址</span></span><br><span class="line">            threads.push_back(<span class="keyword">new</span> thread(&amp;ThreadPool::worker, <span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">worker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//成员含有一个隐藏参数 this!</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;worker: I am worker!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_running == <span class="literal">false</span>) <span class="keyword">return</span> ;</span><br><span class="line">        is_running = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;max_threads_num; i++) &#123;</span><br><span class="line">            threads[i]-&gt;join();</span><br><span class="line">            <span class="keyword">delete</span> threads[i];</span><br><span class="line">        &#125;</span><br><span class="line">        threads.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">bool</span> is_running;</span><br><span class="line">    <span class="keyword">int</span> max_threads_num;</span><br><span class="line">    <span class="built_in">vector</span>&lt;thread *&gt; threads; <span class="comment">//线程池</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">Task</span> <span class="title">t1</span><span class="params">(thread_func1, <span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">Task</span> <span class="title">t2</span><span class="params">(thread_func1, <span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">Task</span> <span class="title">t3</span><span class="params">(thread_func1, <span class="number">9</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line">    t1(), t2(), t3();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="built_in">Task</span> <span class="title">t4</span><span class="params">(thread_func2, ref(n))</span></span>;</span><br><span class="line">    t4();</span><br><span class="line">    t4();</span><br><span class="line">    t4();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ThreadPool <span class="title">tp</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line">    tp.start();</span><br><span class="line">    tp.<span class="built_in">stop</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="getOneTask-和-addOneTask"><a href="#getOneTask-和-addOneTask" class="headerlink" title="getOneTask 和 addOneTask"></a>getOneTask 和 addOneTask</h1><p>在 <code>getonetask</code>时，我们线程池的任务队列中不一定有任务、所以需要有个 <code>addOnTask</code>方法让主线程或其他线程去在任务队列中放任务</p><p>而任务队列是临界资源不能同时又读又取，</p><p>因此两个操作应该是原子操作，</p><p>那就需要加锁处理</p><p> <img src= "/img/loading.gif" data-lazy-src="https://wx1.sbimg.cn/2020/08/15/3P2mh.png" alt="3P2mh.png"></p><h1 id="第一版代码"><a href="#第一版代码" class="headerlink" title="第一版代码"></a>第一版代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 封装一个任务类，</span></span><br><span class="line"><span class="comment"> 通过 bind 将 方法(函数)名和参数绑定在一起, 完成一个任务的封装</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line">    <span class="built_in">Task</span>(T func, ARGS... args) &#123;</span><br><span class="line">        <span class="comment">//forward 使参数按照原来的类型向前传递</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;func = <span class="built_in">std</span>::bind(func, forward&lt;ARGS&gt;(args)...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;func();</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    function&lt;<span class="keyword">void</span>()&gt; func;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ThreadPool(<span class="keyword">int</span> n = <span class="number">5</span>) </span><br><span class="line">    : is_running(<span class="literal">false</span>), max_threads_num(n), m_mutex(), m_cond() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_running) <span class="keyword">return</span> ;</span><br><span class="line">        is_running = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//初始化线程池对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;max_threads_num; i++) &#123;</span><br><span class="line">            <span class="comment">//以成员方法作为入口, 参数不要忘记隐藏的this</span></span><br><span class="line">            <span class="comment">//正常函数传入到 thread()中，直接传入函数名即函数指针，但传入成员方法需要对方法取地址</span></span><br><span class="line">            threads.push_back(<span class="keyword">new</span> thread(&amp;ThreadPool::worker, <span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">worker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向任务队列中取任务 </span></span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;worker: I am worker!&quot; &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">while</span> (is_running) &#123;</span><br><span class="line">            <span class="comment">//只要线程池没有停止，每个线程都会反复的执行下面三个步骤：</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                1、取任务</span></span><br><span class="line"><span class="comment">                2、执行任务</span></span><br><span class="line"><span class="comment">                3、释放任务</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="built_in">Task</span> *t = <span class="keyword">this</span>-&gt;getOneTask();</span><br><span class="line">            <span class="keyword">if</span> (t == <span class="literal">nullptr</span>) <span class="keyword">break</span>;</span><br><span class="line">            (*t)();</span><br><span class="line">            <span class="keyword">delete</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_running == <span class="literal">false</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="comment">//当任务都处理完毕，现在的所有线程都会处于 wait 中在等待着任务，我们此时就可以结束线程池了。</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//要结束线程池，就得先抢到锁，停止，并告诉所有等待任务的线程不要再取了。</span></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">            is_running = <span class="literal">false</span>;</span><br><span class="line">            m_cond.notify_all();</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面使用 do-while 是限定 lock 的作用域，出了&#123;&#125;会自动释放锁，好让那些 wait 的线程收到通知后在抢到锁</span></span><br><span class="line">        <span class="comment">//下面就可以等着回收这些线程了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;max_threads_num; i++) &#123;</span><br><span class="line">            threads[i]-&gt;join();</span><br><span class="line">            <span class="keyword">delete</span> threads[i];</span><br><span class="line">        &#125;</span><br><span class="line">        threads.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //停止任务队列。 可以把任务队列清空</span></span><br><span class="line"><span class="comment">        do &#123;</span></span><br><span class="line"><span class="comment">            unique_lock&lt;mutex&gt; lock(m_mutex);</span></span><br><span class="line"><span class="comment">            while (!task_queue.empty()) task_queue.pop();</span></span><br><span class="line"><span class="comment">        &#125; while (0);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addOneTask</span><span class="params">(T func, ARGS...args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置为公有</span></span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>; <span class="comment">//lock构造完就占到锁了，这个局部变量释放时会自动解锁</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;task_queue.push(<span class="keyword">new</span> <span class="built_in">Task</span>(func, forward&lt;ARGS&gt;(args)...));</span><br><span class="line">        m_cond.notify_one(); <span class="comment">//通知一次(cond + 1)，会有一个线程抢到通知</span></span><br><span class="line">        <span class="keyword">return</span> ; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//取任务操作设置为私有，只希望worker中调用</span></span><br><span class="line">    <span class="function"><span class="built_in">Task</span> *<span class="title">getOneTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>; <span class="comment">//抢碗</span></span><br><span class="line">        <span class="keyword">while</span> (is_running &amp;&amp; task_queue.empty()) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                判断条件如果是 if(task_queue.empty()) 会出错</span></span><br><span class="line"><span class="comment">                因为，addOneTask 抢到 wait 释放的锁后，开始放任务，有可能连续连续抢到两次锁放了两个任务，</span></span><br><span class="line"><span class="comment">                条件变量就会+2，就会放出两个信号让等待中的线程来接收</span></span><br><span class="line"><span class="comment">                但此时如果新进来的线程，一进来就判断到队列不空，它就会取走一个任务，并且也没有给cond-1！</span></span><br><span class="line"><span class="comment">                另一个任务正常地让等待中的一个线程取到了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                但是在等待信号中的另一个线程仍然可以正好收到cond大于0的信号，它会去队列取任务，殊不知任务已经</span></span><br><span class="line"><span class="comment">                被新进来的线程取走了，于是就会出现段错误</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                改成while循环后，等待中的线程收到信号时它会再去判断一下队列是否为空，此时要时真不空就可以去取任务了</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//cout &lt;&lt; this_thread::get_id() &lt;&lt; &quot;wait to task...&quot; &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">//等待任务，直到队列中存在任务</span></span><br><span class="line">            m_cond.wait(lock);  <span class="comment">//1、添加任务可能会满足 2、stop时会满足(所以while中添加个条件)</span></span><br><span class="line">            <span class="comment">//wait: 临时释放锁并等待通知，让加任务的去抢到锁后添加任务并发个通知。这里收到通知后会再次自动抢到锁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这下面还是拿到锁的</span></span><br><span class="line">        <span class="keyword">if</span> (is_running == <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>; <span class="comment">//停止了</span></span><br><span class="line">        <span class="comment">//cout &lt;&lt; this_thread::get_id() &lt;&lt; &quot;take one task...&quot; &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">Task</span> *t = task_queue.front(); </span><br><span class="line">        task_queue.pop();</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> is_running;</span><br><span class="line">    <span class="keyword">int</span> max_threads_num;</span><br><span class="line">    <span class="built_in">vector</span>&lt;thread *&gt; threads; <span class="comment">//线程池</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">Task</span> *&gt; task_queue;</span><br><span class="line">    mutex m_mutex;</span><br><span class="line">    condition_variable m_cond;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task_func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Task func&quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_func1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_func2</span><span class="params">(<span class="keyword">int</span> &amp;n)</span> </span>&#123;</span><br><span class="line">    n += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">Task</span> <span class="title">t1</span><span class="params">(thread_func1, <span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">Task</span> <span class="title">t2</span><span class="params">(thread_func1, <span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">Task</span> <span class="title">t3</span><span class="params">(thread_func1, <span class="number">9</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line">    t1(), t2(), t3();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="built_in">Task</span> <span class="title">t4</span><span class="params">(thread_func2, n)</span></span>;</span><br><span class="line">    t4();</span><br><span class="line">    t4();</span><br><span class="line">    t4();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ThreadPool <span class="title">tp</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line">    tp.start();</span><br><span class="line"></span><br><span class="line">    tp.addOneTask(task_func, <span class="number">126</span>);</span><br><span class="line">    tp.addOneTask(task_func, <span class="number">532</span>);</span><br><span class="line">    tp.addOneTask(task_func, <span class="number">798</span>);</span><br><span class="line">    tp.addOneTask(task_func, <span class="number">100</span>);</span><br><span class="line">    tp.addOneTask(task_func, <span class="number">989</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) ;</span><br><span class="line">    tp.<span class="built_in">stop</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="升级版线程池"><a href="#升级版线程池" class="headerlink" title="升级版线程池"></a>升级版线程池</h1><p>第一版线程池，在 <code>stop</code>时，有可能有的任务还没有被执行，线程池就结束了，我们在stop前加了个循环来等任务处理完。</p><p><strong>升级版：</strong></p><p>我们借助<code>map</code>把每个线程<code>id</code>映射为一个<code>bool</code>值，用<code>is_running</code>记录。当<code>is_runing</code>为真时，代表该线程正在工作。在 <code>worker</code>开始时我们先把该线程的<code>is_runing</code>置为 <code>true</code> 。然后在线程运行时不断的去取任务执行任务。 </p><p><strong>在 <code>stop</code>时我们向线程池中添加等线程数量的<code>stop_task</code>任务</strong>，这个任务专门把线程的 <code>is_runing</code>置为<code>false</code>，线程执行完这个任务，<code>is_runing</code>就变成了<code>false</code>也就不会再去取任务，就结束了。然后就去回收这些线程。这样能保证所有任务都能被执行完。</p><p><img src= "/img/loading.gif" data-lazy-src="https://wx2.sbimg.cn/2020/08/15/3oj5M.png" alt="3oj5M.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 封装一个任务类，</span></span><br><span class="line"><span class="comment"> 通过 bind 将 方法(函数)名和参数绑定在一起, 完成一个任务的封装</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line">    <span class="built_in">Task</span>(T func, ARGS... args) &#123;</span><br><span class="line">        <span class="comment">//forward 使参数按照原来的类型向前传递</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;func = <span class="built_in">std</span>::bind(func, forward&lt;ARGS&gt;(args)...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;func();</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    function&lt;<span class="keyword">void</span>()&gt; func;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ThreadPool(<span class="keyword">int</span> n = <span class="number">5</span>) </span><br><span class="line">    : max_threads_num(n), m_mutex(), m_cond() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化线程池对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;max_threads_num; i++) &#123;</span><br><span class="line">            threads.push_back(<span class="keyword">new</span> thread(&amp;ThreadPool::worker, <span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">worker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        thread::id id = this_thread::get_id();</span><br><span class="line">        is_running[id] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (is_running[id]) &#123;</span><br><span class="line">            <span class="comment">//只要线程池没有停止，每个线程都会反复的执行下面三个步骤：</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                1、取任务</span></span><br><span class="line"><span class="comment">                2、执行任务</span></span><br><span class="line"><span class="comment">                3、释放任务</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="built_in">Task</span> *t = <span class="keyword">this</span>-&gt;getOneTask();</span><br><span class="line">            (*t)();</span><br><span class="line">            <span class="keyword">delete</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;max_threads_num; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;addOneTask(&amp;ThreadPool::stop_task, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;max_threads_num; i++) &#123;</span><br><span class="line">            threads[i]-&gt;join();</span><br><span class="line">            <span class="keyword">delete</span> threads[i];</span><br><span class="line">        &#125;</span><br><span class="line">        threads.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addOneTask</span><span class="params">(T func, ARGS...args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置为公有</span></span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>; <span class="comment">//lock构造完就占到锁了，这个局部变量释放时会自动解锁</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;task_queue.push(<span class="keyword">new</span> <span class="built_in">Task</span>(func, forward&lt;ARGS&gt;(args)...));</span><br><span class="line">        m_cond.notify_one(); <span class="comment">//通知一次(cond + 1)，会有一个线程抢到通知</span></span><br><span class="line">        <span class="keyword">return</span> ; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop_task</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        thread::id id = this_thread::get_id();</span><br><span class="line">        is_running[id] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取任务操作设置为私有，只希望worker中调用</span></span><br><span class="line">    <span class="function"><span class="built_in">Task</span> *<span class="title">getOneTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>; <span class="comment">//抢碗</span></span><br><span class="line">        <span class="keyword">while</span> (task_queue.empty()) &#123;</span><br><span class="line">            m_cond.wait(lock); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Task</span> *t = task_queue.front(); </span><br><span class="line">        task_queue.pop();</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max_threads_num;</span><br><span class="line">    <span class="built_in">vector</span>&lt;thread *&gt; threads; <span class="comment">//线程池</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="built_in">Task</span> *&gt; task_queue;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">std</span>::thread::id, <span class="keyword">bool</span>&gt; is_running;</span><br><span class="line"></span><br><span class="line">    mutex m_mutex;</span><br><span class="line">    condition_variable m_cond;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task_func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Task func&quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_func1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_func2</span><span class="params">(<span class="keyword">int</span> &amp;n)</span> </span>&#123;</span><br><span class="line">    n += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************统计区间内素数数量***************/</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count_prime</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_prime(i)) __sync_fetch_and_add(&amp;cnt, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">Task</span> <span class="title">t1</span><span class="params">(thread_func1, <span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">Task</span> <span class="title">t2</span><span class="params">(thread_func1, <span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">Task</span> <span class="title">t3</span><span class="params">(thread_func1, <span class="number">9</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line">    t1(), t2(), t3();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="built_in">Task</span> <span class="title">t4</span><span class="params">(thread_func2, n)</span></span>;</span><br><span class="line">    t4();</span><br><span class="line">    t4();</span><br><span class="line">    t4();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ThreadPool <span class="title">tp</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line">    tp.start();</span><br><span class="line"></span><br><span class="line">    tp.addOneTask(task_func, <span class="number">126</span>);</span><br><span class="line">    tp.addOneTask(task_func, <span class="number">532</span>);</span><br><span class="line">    tp.addOneTask(task_func, <span class="number">798</span>);</span><br><span class="line">    tp.addOneTask(task_func, <span class="number">100</span>);</span><br><span class="line">    tp.addOneTask(task_func, <span class="number">989</span>);</span><br><span class="line">    tp.<span class="built_in">stop</span>();</span><br><span class="line">    tp.addOneTask(task_func, <span class="number">100</span>);</span><br><span class="line">    tp.addOneTask(task_func, <span class="number">100</span>);</span><br><span class="line">    tp.addOneTask(task_func, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*************用多线程处理任务****************/</span></span><br><span class="line">    <span class="function">ThreadPool <span class="title">tp2</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    tp2.start();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++, j += <span class="number">200000</span>) &#123;</span><br><span class="line">        tp2.addOneTask(count_prime, j, j + <span class="number">200000</span> - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    tp2.<span class="built_in">stop</span>();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多线程统计1-1000000内素数数量"><a href="#多线程统计1-1000000内素数数量" class="headerlink" title="多线程统计1-1000000内素数数量"></a>多线程统计1-1000000内素数数量</h1><p>看升级版代码177行</p><p>我们设置了一个全局变量 cnt, 在统计素数个数的函数中我们操作它、很明显它是一个临界资源，需要加锁</p><blockquote><p> <strong>__sync_fetch_and_add</strong></p></blockquote><p>__sync_fetch_and_add系列一共有十二个函数，有加/减/与/或/异或/等函数的原子性操作函数</p><p>加上<code>__sync_fetch_and_add</code>对cnt的操作就变成原子操作了， 看代码142行</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="/2020/08/13/c++/6.%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/08/13/c++/6.%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<script async src="//sbimg.cn/sdk/pup.js" data-url="https://sbimg.cn/upload" data-auto-insert="markdown-embed-full"></script><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/13/dp8gNq.png" alt="dp8gNq.png"><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/13/dp8vvD.png" alt="dp8vvD.png"></p><p> <img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/13/dpGkPP.png" alt="dpGkPP.png"><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/13/dpGsxO.png" alt="dpGsxO.png"></p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><blockquote><p>程序 = 算法 + 数据结构</p><p>数据结构：能够存储<strong>任意类型</strong></p><p>算法：能够操作 存储<strong>任意类型</strong>数据的 数据结构</p></blockquote><blockquote><p><strong>泛型编程</strong>： 将任意类型从程序中抽象出来</p></blockquote><p> <img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/13/dplJ7q.png" alt="dplJ7q.png"></p><blockquote><p><strong>模板</strong></p><p>模板和宏有一些类似，它们都是编译期确定的，运行时就已经没有模板了， 模板在编译时已经实例化成了具体的函数</p><p>使用 <code>nm -C test.o</code> 或 <code>nm -C a.out</code> 可以查看 <code>test</code>中或 <code>a.out</code>中已经定义的文件</p></blockquote><blockquote><p>源代码———(预处理)———&gt; 编译 ———(生成目标文件，已不存在模板)———&gt; 链接 —————–&gt; 可执行文件</p><p>在链接阶段，编译器会合并相同的模板方法或模板类</p></blockquote><ul><li><p>模板函数</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模板类</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Print</span> &#123;</span></span><br><span class="line">    Print(<span class="built_in">std</span>::ostream &amp;out) : out(out) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">        out &lt;&lt; a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::ostream &amp;out;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>模板类+模板函数</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Print</span> &#123;</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> U &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;__temp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> T &amp;temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;__temp = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    T __temp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h1 id="模板特化"><a href="#模板特化" class="headerlink" title="模板特化"></a>模板特化</h1><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/13/dp88nH.png" alt="dp88nH.png"><img src= "/img/loading.gif" data-lazy-src="https://wx2.sbimg.cn/2020/08/14/3m79k.png" alt="3m79k.png"><img src= "/img/loading.gif" data-lazy-src="https://wx1.sbimg.cn/2020/08/14/3mHtn.png" alt="3mHtn.png"></p><h1 id="模板的偏特化"><a href="#模板的偏特化" class="headerlink" title="模板的偏特化"></a>模板的偏特化</h1><p>只是部分类型确定</p><p><img src= "/img/loading.gif" data-lazy-src="https://wx2.sbimg.cn/2020/08/14/3mKlh.png" alt="3mKlh.png"></p><h1 id="可变参数模板"><a href="#可变参数模板" class="headerlink" title="可变参数模板"></a>可变参数模板</h1><p><img src= "/img/loading.gif" data-lazy-src="https://wx1.sbimg.cn/2020/08/14/3manR.png" alt="3manR.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://wx2.sbimg.cn/2020/08/14/3mUMI.png" alt="3mUMI.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://wx1.sbimg.cn/2020/08/14/3micK.png" alt="3micK.png"></p><h1 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h1><p>进行表达式类型的推导，详细看第一版代码第 29 行</p><h1 id="模板参数类型推导"><a href="#模板参数类型推导" class="headerlink" title="模板参数类型推导"></a>模板参数类型推导</h1><h2 id="正常类型推导"><a href="#正常类型推导" class="headerlink" title="正常类型推导"></a>正常类型推导</h2><ul><li>隐式转换</li><li>显示转换</li><li>模板函数作为参数，传递时的间接类型推导（详细看四版代码132行）</li></ul><h2 id="引用类型推导☆"><a href="#引用类型推导☆" class="headerlink" title="引用类型推导☆"></a>引用类型推导☆</h2><p>假如有模板函数 <code>T add(T &amp;&amp;a, T &amp;&amp;b)</code></p><p>一般我们认为这两个参数传递的是右值引用， 但是 <strong>在模板中</strong> <strong>这并不是右值引用</strong>，只能说明  <code>a</code> <code>b</code> 是引用类型！因为此时并不能确定 <code>T</code>的类型，但可以确定的知道 他们是引用！</p><p>此时就要看调用这个方法时，我们传入的参数具体是<strong>左值</strong>还是<strong>右值</strong>，以整数为例</p><p>如果我们传进去的是左值，那么 T 的类型就是左值引用，模板函数变为<code>int&amp; add(int &amp;&amp;&amp;a, int &amp;&amp;&amp;b)</code></p><p>如果我们传进去的是左值，那么 T 的类型就是左值引用，模板函数变为<code>int&amp;&amp; add(int &amp;&amp;&amp;&amp;a, int &amp;&amp;&amp;&amp;b)</code></p><p>这么多 &amp; ? 这就是 <strong>引用折叠</strong></p><p><strong>模板中，奇数个 &amp; 是左值引用， 偶数个 &amp; 是 右值引用</strong>，编译器会去掉多余的 &amp; 只保留一个或两个</p><h2 id="标准类型转换"><a href="#标准类型转换" class="headerlink" title="标准类型转换"></a>标准类型转换</h2><p>如果 函数体<code>int&amp; add(int &amp;a, int &amp;b) &#123; return a + b &#125;</code>， <code>a + b</code>是一个右值，而返回值类型是 <code>int &amp;</code>, 右值不可能绑定到左值引用上的</p><p>系统中的一些类型转换模板就起到了作用</p><p><code>remove_reference&lt;T&gt; </code>模板类就可以 把 T 中的引用去掉把 T 变成 一个普通的类型，我们就可以在 T 上使用这个模板类</p><p><code>add_const</code> 添加 const限定</p><p><code>remove_point</code> 去掉指针类型</p><p>….. 在第四版代码中进行了实现</p><h2 id="move函数实现"><a href="#move函数实现" class="headerlink" title="move函数实现"></a>move函数实现</h2><p>move是将变量类型强制转换成右值引用</p><p>我们就可以使用 <code>add_rvalue_reference&lt;T&gt;</code> 来实现它，看第四版代码</p><p>第一版:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> x) : x(x) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> y) : y(y) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>+(<span class="keyword">const</span> A &amp;a, <span class="keyword">const</span> B &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.x + b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> haizei &#123;</span><br><span class="line"><span class="comment">/*********************函数模板+特化+偏特化+返回值后置*****************************/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="comment">//decltype(T() + U()) add(T a, U b ) &#123;</span></span><br><span class="line"><span class="comment">// 当T 和 U 没有默认的构造函数的时候就会报错，下面这样写就解决了（将返回值后置）</span></span><br><span class="line">auto add(T a, U b ) -&gt; decltype(a + b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//特化函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;add int : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//偏特化函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto add(T *a, U *b) -&gt; decltype(*a + *b) &#123;</span><br><span class="line">    <span class="keyword">return</span> add(*a, *b); <span class="comment">//防止a, b是多重指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****用返回值后置完善标准库中的 max 和 min ***************************************/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto max(T a, U b) -&gt; decltype(a + b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &lt; b ? b : a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto min(T a, U b) -&gt; decltype(a + b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &lt; b ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************************************************/</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintAny</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************类模板和类模板特化**********************/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoolPrintAny</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="comment">//特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoolPrintAny</span>&lt;int&gt; &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;naughty : &quot;</span> &lt;&lt; <span class="number">2</span> * a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/******************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//**************************************变参函数模板*************/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">//变参模板函数边界，这个放上面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAny</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAny</span><span class="params">(<span class="keyword">const</span> T &amp;a, ARGS...args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    printAny(args...);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***************************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//****************************实现ARG（解析变参列表的类模板）***************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T __type;</span><br><span class="line">    <span class="keyword">typedef</span> ARG&lt;ARGS...&gt; __rest;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span>&lt;T&gt; &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T __type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***************************************************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//变参模板类</span></span><br><span class="line"><span class="comment">//设计一个模板类ARG来解析变参类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt; <span class="class"><span class="keyword">class</span> <span class="title">Test</span>;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt; <span class="comment">//Test的偏特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;T(ARGS...)&gt; &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">typename</span> ARG&lt;ARGS...&gt;::__type a, </span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">//typename 为了避免语义歧义，说明后面的__type是个类型，是模板类中的内置类型</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">typename</span> ARG&lt;ARGS...&gt;::__rest::__type b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">//end of haizei::</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">a</span><span class="params">(<span class="number">1000</span>)</span></span>;</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(<span class="number">646</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">4.2</span>, <span class="number">3.6</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">4.5</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">3</span>, <span class="number">4.5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//max也是模板实现的, 但是标准库中的max只支持两种同类型参数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">max</span>(<span class="number">4</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">max</span>(<span class="number">4.6</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">max</span>(<span class="number">55</span>, <span class="number">88.8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">min</span>(<span class="number">4.5</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">min</span>(<span class="number">55</span>, <span class="number">88.8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    haizei::PrintAny <span class="built_in">print</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">56456</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">554.2</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello haizei&quot;</span>);</span><br><span class="line">    <span class="built_in">print</span>(&amp;a);</span><br><span class="line"></span><br><span class="line">    haizei::FoolPrintAny&lt;<span class="built_in">string</span>&gt; f;</span><br><span class="line">    f(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    haizei::FoolPrintAny&lt;<span class="keyword">int</span>&gt; f2; <span class="comment">//特化模板类</span></span><br><span class="line">    f2(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">45</span>, m = <span class="number">57</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;n, *q = &amp;m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(n, m) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//调用特化函数模板</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(p, q) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">    haizei::printAny(<span class="number">123</span>, <span class="number">34.5</span>, <span class="string">&quot;hello world&quot;</span>, &amp;a);</span><br><span class="line"></span><br><span class="line">    haizei::Test&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f3;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f3(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二版：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> x) : x(x) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> y) : y(y) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>+(<span class="keyword">const</span> A &amp;a, <span class="keyword">const</span> B &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.x + b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> haizei &#123;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="comment">//decltype(T() + U()) add(T a, U b ) &#123;</span></span><br><span class="line"><span class="comment">// 当T 和 U 没有默认的构造函数的时候就会报错，下面这样写就解决了</span></span><br><span class="line">auto add(T a, U b ) -&gt; decltype(a + b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//特化函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;add int : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//偏特化函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto add(T *a, U *b) -&gt; decltype(*a + *b) &#123;</span><br><span class="line">    <span class="keyword">return</span> add(*a, *b); <span class="comment">//防止a, b是多重指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto max(T a, U b) -&gt; decltype(a + b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &lt; b ? b : a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto min(T a, U b) -&gt; decltype(a + b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &lt; b ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintAny</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoolPrintAny</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoolPrintAny</span>&lt;int&gt; &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;naughty : &quot;</span> &lt;&lt; <span class="number">2</span> * a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//变参模板函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">//变参模板函数边界，这个放上面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAny</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAny</span><span class="params">(<span class="keyword">const</span> T &amp;a, ARGS...args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    printAny(args...);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//****************************实现ARG（解析变参列表的类模板）***************</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//n 是编译期常量，因为模板在运行期就没了，在运行期输入n就对应不上模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n, <span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> ARG&lt;n - <span class="number">1</span>, ARGS...&gt;::__type __type;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span>&lt;0, T, ARGS...&gt; &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T __type;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span>&lt;0, T&gt; &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T __type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***************************************************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//变参模板类</span></span><br><span class="line"><span class="comment">//设计一个模板类ARG来解析变参类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt; <span class="class"><span class="keyword">class</span> <span class="title">Test</span>;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt; <span class="comment">//Test的偏特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;T(ARGS...)&gt; &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">typename</span> ARG&lt;<span class="number">0</span>, ARGS...&gt;::__type a, </span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">typename</span> ARG&lt;<span class="number">1</span>, ARGS...&gt;::__type b</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">a</span><span class="params">(<span class="number">1000</span>)</span></span>;</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(<span class="number">646</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">4.2</span>, <span class="number">3.6</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">4.5</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">3</span>, <span class="number">4.5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//max也是模板实现的, 但是标准库中的max只支持两种同类型参数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">max</span>(<span class="number">4</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">max</span>(<span class="number">4.6</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">max</span>(<span class="number">55</span>, <span class="number">88.8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">min</span>(<span class="number">4.5</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">min</span>(<span class="number">55</span>, <span class="number">88.8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    haizei::PrintAny <span class="built_in">print</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">56456</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">554.2</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello haizei&quot;</span>);</span><br><span class="line">    <span class="built_in">print</span>(&amp;a);</span><br><span class="line"></span><br><span class="line">    haizei::FoolPrintAny&lt;<span class="built_in">string</span>&gt; f;</span><br><span class="line">    f(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    haizei::FoolPrintAny&lt;<span class="keyword">int</span>&gt; f2; <span class="comment">//特化模板类</span></span><br><span class="line">    f2(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">45</span>, m = <span class="number">57</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;n, *q = &amp;m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(n, m) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//调用特化模板函数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(p, q) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">    haizei::printAny(<span class="number">123</span>, <span class="number">34.5</span>, <span class="string">&quot;hello world&quot;</span>, &amp;a);</span><br><span class="line"></span><br><span class="line">    haizei::Test&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f3;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f3(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三版：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> x) : x(x) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> y) : y(y) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>+(<span class="keyword">const</span> A &amp;a, <span class="keyword">const</span> B &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.x + b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> haizei &#123;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="comment">//decltype(T() + U()) add(T a, U b ) &#123;</span></span><br><span class="line"><span class="comment">// 当T 和 U 没有默认的构造函数的时候就会报错，下面这样写就解决了</span></span><br><span class="line">auto add(T a, U b ) -&gt; decltype(a + b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//特化函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;add int : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//偏特化函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto add(T *a, U *b) -&gt; decltype(*a + *b) &#123;</span><br><span class="line">    <span class="keyword">return</span> add(*a, *b); <span class="comment">//防止a, b是多重指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto max(T a, U b) -&gt; decltype(a + b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &lt; b ? b : a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto min(T a, U b) -&gt; decltype(a + b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &lt; b ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintAny</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoolPrintAny</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoolPrintAny</span>&lt;int&gt; &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;naughty : &quot;</span> &lt;&lt; <span class="number">2</span> * a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//变参模板函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">//变参模板函数边界，这个放上面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAny</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAny</span><span class="params">(<span class="keyword">const</span> T &amp;a, ARGS... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    printAny(args...);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//****************************实现ARG（解析变参列表的类模板）***************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n, <span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> ARG&lt;n - <span class="number">1</span>, ARGS...&gt;::__type __type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span>&lt;0, T, ARGS...&gt; &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T __type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span>&lt;0, T&gt; &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T __type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***************************************************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//变参模板类</span></span><br><span class="line"><span class="comment">//设计一个模板类ARG来解析变参类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt; <span class="class"><span class="keyword">class</span> <span class="title">Test</span>;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt; <span class="comment">//Test的偏特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;T(ARGS...)&gt; &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(ARGS... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> add&lt;T&gt;(args...);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> U, <span class="keyword">typename</span> ...US&gt;</span><br><span class="line">    <span class="function">T1 <span class="title">add</span><span class="params">(U a, US... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + add&lt;T&gt;(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="function">T1 <span class="title">add</span><span class="params">(U a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">a</span><span class="params">(<span class="number">1000</span>)</span></span>;</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(<span class="number">646</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">4.2</span>, <span class="number">3.6</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">4.5</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">3</span>, <span class="number">4.5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//max也是模板实现的, 但是标准库中的max只支持两种同类型参数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">max</span>(<span class="number">4</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">max</span>(<span class="number">4.6</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">max</span>(<span class="number">55</span>, <span class="number">88.8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">min</span>(<span class="number">4.5</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">min</span>(<span class="number">55</span>, <span class="number">88.8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    haizei::PrintAny <span class="built_in">print</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">56456</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">554.2</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello haizei&quot;</span>);</span><br><span class="line">    <span class="built_in">print</span>(&amp;a);</span><br><span class="line"></span><br><span class="line">    haizei::FoolPrintAny&lt;<span class="built_in">string</span>&gt; f;</span><br><span class="line">    f(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    haizei::FoolPrintAny&lt;<span class="keyword">int</span>&gt; f2; <span class="comment">//特化模板类</span></span><br><span class="line">    f2(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">45</span>, m = <span class="number">57</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;n, *q = &amp;m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(n, m) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//调用特化模板函数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(p, q) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">    haizei::printAny(<span class="number">123</span>, <span class="number">34.5</span>, <span class="string">&quot;hello world&quot;</span>, &amp;a);</span><br><span class="line"></span><br><span class="line">    haizei::Test&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f3;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f3(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    haizei::Test&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f4;   <span class="comment">//()外的int是返回值类型</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f4(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//累加求和</span></span><br><span class="line">    </span><br><span class="line">    haizei::Test&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f5;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f5(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//累加求和</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四版:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> x) : x(x) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> y) : y(y) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span>+(<span class="keyword">const</span> A &amp;a, <span class="keyword">const</span> B &amp;b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.x + b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> haizei &#123;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="comment">//decltype(T() + U()) add(T a, U b ) &#123;</span></span><br><span class="line"><span class="comment">// 当T 和 U 没有默认的构造函数的时候就会报错，下面这样写就解决了</span></span><br><span class="line">auto add(T a, U b ) -&gt; decltype(a + b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//特化函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;add int : &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//偏特化函数模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto add(T *a, U *b) -&gt; decltype(*a + *b) &#123;</span><br><span class="line">    <span class="keyword">return</span> add(*a, *b); <span class="comment">//防止a, b是多重指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto max(T a, U b) -&gt; decltype(a + b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &lt; b ? b : a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto min(T a, U b) -&gt; decltype(a + b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &lt; b ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintAny</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoolPrintAny</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FoolPrintAny</span>&lt;int&gt; &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;naughty : &quot;</span> &lt;&lt; <span class="number">2</span> * a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//变参模板函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">//变参模板函数边界，这个放上面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAny</span><span class="params">(<span class="keyword">const</span> T &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAny</span><span class="params">(<span class="keyword">const</span> T &amp;a, ARGS... args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    printAny(args...);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//****************************实现ARG（解析变参列表的类模板）***************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n, <span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> ARG&lt;n - <span class="number">1</span>, ARGS...&gt;::__type __type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span>&lt;0, T, ARGS...&gt; &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T __type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARG</span>&lt;0, T&gt; &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T __type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***************************************************************************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//变参模板类</span></span><br><span class="line"><span class="comment">//设计一个模板类ARG来解析变参类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt; <span class="class"><span class="keyword">class</span> <span class="title">Test</span>;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt; <span class="comment">//Test的偏特化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;T(ARGS...)&gt; &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(ARGS... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> add&lt;T&gt;(args...);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> U, <span class="keyword">typename</span> ...US&gt;</span><br><span class="line">    <span class="function">T1 <span class="title">add</span><span class="params">(U a, US... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + add&lt;T&gt;(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="function">T1 <span class="title">add</span><span class="params">(U a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************模板函数作为参数传递时，自动类型推导**/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">T <span class="title">test_param_func</span><span class="params">(U a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> T(a * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> (*func)(<span class="keyword">double</span>))</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; func(<span class="number">2.3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*****************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************标准类型转换模板************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//remove_reference模板类将T的引用去掉，变成普通的类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">remove_reference</span> &#123;</span> <span class="keyword">typedef</span> T type; &#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">remove_reference</span>&lt;T &amp;&gt; &#123;</span> <span class="keyword">typedef</span> T type; &#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">remove_reference</span>&lt;T &amp;&amp;&gt; &#123;</span> <span class="keyword">typedef</span> T type; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add_const</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">add_const</span> &#123;</span> <span class="keyword">typedef</span> <span class="keyword">const</span> T type; &#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">add_const</span>&lt;const T&gt; &#123;</span> <span class="keyword">typedef</span> <span class="keyword">const</span> T type; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add_lvalue_reference</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">add_lvalue_reference</span> &#123;</span> <span class="keyword">typedef</span> T &amp;type; &#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">add_lvalue_reference</span>&lt;T &amp;&gt; &#123;</span> <span class="keyword">typedef</span> T &amp;type; &#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">add_lvalue_reference</span>&lt;T &amp;&amp;&gt; &#123;</span> <span class="keyword">typedef</span> T &amp;type; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// add_rvalue_reference</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">add_rvalue_reference</span> &#123;</span> <span class="keyword">typedef</span> T&amp;&amp; type; &#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">add_rvalue_reference</span>&lt;T &amp;&gt; &#123;</span> <span class="keyword">typedef</span>  T&amp;&amp; type; &#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">add_rvalue_reference</span>&lt;T &amp;&amp;&gt; &#123;</span> <span class="keyword">typedef</span> T&amp;&amp; type; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// add_lvalue_reference</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">remove_pointer</span> &#123;</span> <span class="keyword">typedef</span> T type; &#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">remove_pointer</span>&lt;T *&gt; &#123;</span> <span class="keyword">typedef</span> <span class="keyword">typename</span> remove_pointer&lt;T&gt;::type type; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//move 函数的实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> add_rvalue_reference&lt;T&gt;::<span class="function">type <span class="title">move</span><span class="params">(T &amp;&amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typename</span> add_rvalue_reference&lt;T&gt;::type(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f : left value&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> &amp;&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f : right value&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> remove_reference&lt;T&gt;::<span class="function">type <span class="title">add2</span><span class="params">(T &amp;&amp;a, T &amp;&amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typename</span> remove_reference&lt;T&gt;::type c = a + b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***********************************************************************/</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// END OF haizei</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> inta = <span class="number">123</span>, intb = <span class="number">456</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add2(inta, intb) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add2(<span class="number">123</span>, <span class="number">456</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    haizei::func2(haizei::test_param_func);</span><br><span class="line">    <span class="function">A <span class="title">a</span><span class="params">(<span class="number">1000</span>)</span></span>;</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(<span class="number">646</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">4.2</span>, <span class="number">3.6</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">4.5</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(<span class="number">3</span>, <span class="number">4.5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//max也是模板实现的, 但是标准库中的max只支持两种同类型参数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">max</span>(<span class="number">4</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">max</span>(<span class="number">4.6</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">max</span>(<span class="number">55</span>, <span class="number">88.8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">min</span>(<span class="number">4.5</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::<span class="built_in">min</span>(<span class="number">55</span>, <span class="number">88.8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    haizei::PrintAny <span class="built_in">print</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">56456</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">554.2</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello haizei&quot;</span>);</span><br><span class="line">    <span class="built_in">print</span>(&amp;a);</span><br><span class="line"></span><br><span class="line">    haizei::FoolPrintAny&lt;<span class="built_in">string</span>&gt; f;</span><br><span class="line">    f(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    haizei::FoolPrintAny&lt;<span class="keyword">int</span>&gt; f2; <span class="comment">//特化模板类</span></span><br><span class="line">    f2(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">45</span>, m = <span class="number">57</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;n, *q = &amp;m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(n, m) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//调用特化模板函数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; haizei::add(p, q) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">    haizei::printAny(<span class="number">123</span>, <span class="number">34.5</span>, <span class="string">&quot;hello world&quot;</span>, &amp;a);</span><br><span class="line"></span><br><span class="line">    haizei::Test&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f3;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f3(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    haizei::Test&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f4;   <span class="comment">//()外的int是返回值类型</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f4(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//累加求和</span></span><br><span class="line">    </span><br><span class="line">    haizei::Test&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f5;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f5(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//累加求和</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//move函数测试</span></span><br><span class="line">    haizei::f(n);</span><br><span class="line">    haizei::f(haizei::<span class="built_in">move</span>(n));</span><br><span class="line">    <span class="comment">//cout &lt;&lt; n &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="function"><a href="#function" class="headerlink" title="function"></a><a href="https://zh.cppreference.com/w/cpp/utility/functional/function">function</a></h1><p>类模板 <code>std::function</code> 是通用多态函数封装器。 <code>std::function</code> 的实例能存储、复制及调用任何<a href="https://zh.cppreference.com/w/cpp/named_req/Callable"><em>可调用</em> <em>(Callable)</em> </a><em>目标</em>——函数、 <a href="https://zh.cppreference.com/w/cpp/language/lambda">lambda 表达式</a>、 <a href="https://zh.cppreference.com/w/cpp/utility/functional/bind">bind 表达式</a>或其他函数对象，还有指向成员函数指针和指向数据成员指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">R</span>, <span class="title">class</span>... <span class="title">Args</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">function</span>&lt;R(Args...)&gt;;</span></span><br></pre></td></tr></table></figure><p>使用看链接</p><h2 id="function的实现"><a href="#function的实现" class="headerlink" title="function的实现"></a>function的实现</h2><p>实现 <code>function</code> 思路：</p><blockquote><ol><li><p>首先 <code>function</code> 可以接收普通函数也可以接收函数对象，所以就要实现一个 抽象类 <code>base</code>，用来把普通函数和函数对象的类封装成一个类，<strong>并重载 ()， 后面ptr好调用</strong>，也就是统一成一个函数对象</p></li><li><p>并实现一个子类<code>normal_func</code>去具体封装普通函数，再实现一个子类<code>functor</code>封装已存在的函数对象. 子类具体实现看代码</p></li><li><p>这样我们在 <code>function</code> 中定义一个成员属性 - <code>base</code> 类型的指针 <code>ptr</code>，并去实现两个有参构造函数(转换构造)，一个是把<code>normal_func</code>的对象赋值给 <code>ptr</code></p><p> 一个把<code>functor</code>的对象赋给 <code>ptr</code>。</p></li><li><p>然后还需要在<code>function</code>类中重载 (),  里面我们调用 <code>ptr</code>指向的函数对象的 ()</p></li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> haizei &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> ...PARAMS&gt; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> RT <span class="title">operator</span><span class="params">()</span><span class="params">(PARAMS...)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~base() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> ...PARAMS&gt; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal_func</span> :</span> <span class="keyword">public</span> base&lt;RT, PARAMS...&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">RT</span> <span class="params">(*func_type)</span><span class="params">(PARAMS...)</span></span>;</span><br><span class="line">    normal_func(func_type func) : ptr(func) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> RT <span class="title">operator</span><span class="params">()</span><span class="params">(PARAMS... args)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;ptr(args...);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    func_type ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> C, <span class="keyword">typename</span> RT, <span class="keyword">typename</span> ...PARAMS&gt; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">functor</span> :</span> <span class="keyword">public</span> base&lt;RT, PARAMS...&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    functor(C &amp;func) : ptr(func) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> RT <span class="title">operator</span><span class="params">()</span><span class="params">(PARAMS... args)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;ptr(args...);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    C &amp;ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RT：返回值类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> ...PARAMS&gt; <span class="class"><span class="keyword">class</span> <span class="title">function</span>;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> ...PARAMS&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">function</span>&lt;RT(PARAMS...)&gt; &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    function(RT (*func)(PARAMS...)) : ptr(<span class="keyword">new</span> normal_func&lt;RT, PARAMS...&gt;(func)) &#123;&#125; <span class="comment">//普通函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    function(T &amp;&amp;a) : ptr(<span class="keyword">new</span> functor&lt;<span class="keyword">typename</span> remove_reference&lt;T&gt;::type, RT, PARAMS...&gt;(a))&#123;&#125; <span class="comment">//函数对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function">RT <span class="title">operator</span><span class="params">()</span><span class="params">(PARAMS... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;ptr-&gt;<span class="keyword">operator</span>()(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    ~function() &#123;</span><br><span class="line">        <span class="keyword">delete</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   base&lt;RT, PARAMS...&gt; *ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">//end of haizei;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; g)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; g(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MaxClass</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/************************统计函数执行次数********************************/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FunctionCnt</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    FunctionCnt(function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; g) : g(g), __cnt(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        __cnt += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> g(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cnt</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> __cnt; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; g;</span><br><span class="line">    <span class="keyword">int</span> __cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/******************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MaxClass <span class="built_in">max</span>;</span><br><span class="line">    f(add);</span><br><span class="line">    f(<span class="built_in">max</span>);</span><br><span class="line">    <span class="function">haizei::function&lt;<span class="title">int</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span>&gt; <span class="title">g1</span><span class="params">(add)</span></span>;</span><br><span class="line">    <span class="function">haizei::function&lt;<span class="title">int</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span>&gt; <span class="title">g2</span><span class="params">(<span class="built_in">max</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; g1(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; g2(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">FunctionCnt <span class="title">add_cnt</span><span class="params">(add)</span></span>;</span><br><span class="line">    add_cnt(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    add_cnt(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    add_cnt(<span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; add_cnt.cnt() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="统计函数执行的次数"><a href="#统计函数执行的次数" class="headerlink" title="统计函数执行的次数"></a>统计函数执行的次数</h2><p>上一个代码实现了具体类型的统计函数执行次数的类， 这次用模板去实现</p><p>在使用自己实现的function来统计遇到了一个***的小问题，具体看代码注释（从146行开始看）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> haizei &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> ...PARAMS&gt; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> RT <span class="title">operator</span><span class="params">()</span><span class="params">(PARAMS...)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    virtual base&lt;RT, PARAMS...&gt; *getCopy() = 0;</span><br><span class="line">    <span class="keyword">virtual</span> ~base() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把函数抽象为另一个函数对象的类的实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> ...PARAMS&gt; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal_func</span> :</span> <span class="keyword">public</span> base&lt;RT, PARAMS...&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">RT</span> <span class="params">(*func_type)</span><span class="params">(PARAMS...)</span></span>;  <span class="comment">//函数指针</span></span><br><span class="line">    normal_func(func_type func) : ptr(func) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> RT <span class="title">operator</span><span class="params">()</span><span class="params">(PARAMS... args)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;ptr(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    virtual base&lt;RT, PARAMS...&gt; *getCopy() override &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> normal_func&lt;RT, PARAMS...&gt;(ptr);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    func_type ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数对象类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> C, <span class="keyword">typename</span> RT, <span class="keyword">typename</span> ...PARAMS&gt; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">functor</span> :</span> <span class="keyword">public</span> base&lt;RT, PARAMS...&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    functor(C &amp;func) : ptr(func) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> RT <span class="title">operator</span><span class="params">()</span><span class="params">(PARAMS... args)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;ptr(args...);</span><br><span class="line">    &#125;    </span><br><span class="line">    virtual base&lt;RT, PARAMS...&gt; *getCopy() override &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> functor&lt;C, RT, PARAMS...&gt;(ptr);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    C &amp;ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> ...PARAMS&gt; <span class="class"><span class="keyword">class</span> <span class="title">function</span>;</span> <span class="comment">//RT：返回值类型, PARAMS...:变参列表</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> ...PARAMS&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">function</span>&lt;RT(PARAMS...)&gt; &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    function(RT (*func)(PARAMS...)) : ptr(<span class="keyword">new</span> normal_func&lt;RT, PARAMS...&gt;(func)) &#123;&#125; <span class="comment">//普通函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    function(T a) : ptr(<span class="keyword">new</span> functor&lt;<span class="keyword">typename</span> remove_reference&lt;T&gt;::type, RT, PARAMS...&gt;(a))&#123;&#125; <span class="comment">//函数对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function(<span class="keyword">const</span> function &amp;f) &#123;</span><br><span class="line">        <span class="comment">//普通拷贝构造</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          在实现左值这个深拷贝时, 我们并不知道f.ptr的类型是普通的函数还是函数对象，这样很难开辟空间实现深拷贝</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          妙招：我们在base类中声明一个拷贝自己的纯虚函数，让子类实现这个方法并返回一个base类型的指针，</span></span><br><span class="line"><span class="comment">                让左值引用的形参f来调用这个方法， 用this的ptr来接收返回值，这样就不用关心 f 中的ptr具体是</span></span><br><span class="line"><span class="comment">                什么类型了。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;ptr = f.ptr-&gt;getCopy();</span><br><span class="line">    &#125;</span><br><span class="line">    function(function &amp;&amp;f) &#123;</span><br><span class="line">        <span class="comment">//移动构造函数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;ptr = f.ptr;</span><br><span class="line">        f.ptr = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function">RT <span class="title">operator</span><span class="params">()</span><span class="params">(PARAMS... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;ptr-&gt;<span class="keyword">operator</span>()(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    ~function() &#123;</span><br><span class="line">        <span class="keyword">if</span>(ptr != <span class="literal">nullptr</span>) <span class="keyword">delete</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    base&lt;RT, PARAMS...&gt; *ptr;  <span class="comment">//“ 函数对象(把函数对象和函数都抽象化为另一个函数对象)” 的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">//end of haizei;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; g)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; g(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b, <span class="keyword">float</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;hello world!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MaxClass</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*   //使用系统的function统计</span></span><br><span class="line"><span class="comment">template&lt;typename T, typename ...ARGS&gt; class FunctionCnt; </span></span><br><span class="line"><span class="comment">template&lt;typename T, typename ...ARGS&gt; </span></span><br><span class="line"><span class="comment">class FunctionCnt&lt;T(ARGS...)&gt; &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    FunctionCnt() : __cnt(0) &#123;&#125;</span></span><br><span class="line"><span class="comment">    FunctionCnt(function&lt;T(ARGS...)&gt; g) : g(g), __cnt(0) &#123;&#125;</span></span><br><span class="line"><span class="comment">    T operator()(ARGS... args) &#123;</span></span><br><span class="line"><span class="comment">        __cnt += 1;</span></span><br><span class="line"><span class="comment">        return g(args...);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int cnt() &#123; return __cnt; &#125;</span></span><br><span class="line"><span class="comment">private:</span></span><br><span class="line"><span class="comment">    function&lt;T(ARGS...)&gt; g;</span></span><br><span class="line"><span class="comment">    int __cnt;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用自己实现的function来统计</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt; <span class="class"><span class="keyword">class</span> <span class="title">FunctionCnt</span>;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ...ARGS&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FunctionCnt</span>&lt;T(ARGS...)&gt; &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    FunctionCnt(haizei::function&lt;T(ARGS...)&gt; g) : g(g), __cnt(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果传入的是haizei::function, 将自己的对象g拷贝给系统的会出现段错误， 原因是：</span></span><br><span class="line"><span class="comment">    执行初始化列表g(g)时调用的是系统function的转换构造函数（只有一个参数的有参构造）：</span></span><br><span class="line"><span class="comment">        template&lt;class F&gt;</span></span><br><span class="line"><span class="comment">        function(F f);</span></span><br><span class="line"><span class="comment">    在执行转换构造时，发现形参是一个我们具体function的对象（而不是引用），</span></span><br><span class="line"><span class="comment">    这时就会发生我们function类的拷贝构造，把我们传入的 g 拷贝一份给 f</span></span><br><span class="line"><span class="comment">    但是在上一个代码中我们的function中没有写拷贝构造，他就会默认执行浅拷贝，因此会发生段错误</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    我们就需要在 function 中写一个普通拷贝构造和一个移动拷贝构造</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">operator</span><span class="params">()</span><span class="params">(ARGS... args)</span> </span>&#123;</span><br><span class="line">        __cnt += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> g(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cnt</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> __cnt; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//haizei::function&lt;T(ARGS...)&gt; g;</span></span><br><span class="line">    function&lt;T(ARGS...)&gt; g;</span><br><span class="line">    <span class="keyword">int</span> __cnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MaxClass <span class="built_in">max</span>;</span><br><span class="line">    f(add);</span><br><span class="line">    f(<span class="built_in">max</span>);</span><br><span class="line">    <span class="function">haizei::function&lt;<span class="title">int</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span>&gt; <span class="title">g1</span><span class="params">(add)</span></span>;</span><br><span class="line">    <span class="function">haizei::function&lt;<span class="title">int</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span>&gt; <span class="title">g2</span><span class="params">(<span class="built_in">max</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; g1(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; g2(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">FunctionCnt&lt;<span class="title">int</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span>&gt; <span class="title">add_cnt</span><span class="params">(add)</span></span>;</span><br><span class="line">    add_cnt(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    add_cnt(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    add_cnt(<span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; add_cnt.cnt() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">FunctionCnt&lt;<span class="title">double</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">double</span>, <span class="keyword">float</span>)</span>&gt; <span class="title">add2_cnt</span><span class="params">(add2)</span></span>;</span><br><span class="line">    add2_cnt(<span class="number">3.5</span>, <span class="number">66</span>, <span class="number">53.1</span>);</span><br><span class="line">    add2_cnt(<span class="number">3.87</span>, <span class="number">22</span>, <span class="number">7.1</span>);</span><br><span class="line">    add2_cnt(<span class="number">66.57</span>, <span class="number">23</span>, <span class="number">9.3</span>);</span><br><span class="line">    add2_cnt(<span class="number">78.1</span>, <span class="number">88</span>, <span class="number">8.3</span>);</span><br><span class="line">    add2_cnt(<span class="number">96.36</span>, <span class="number">51</span>, <span class="number">99.31</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; add2_cnt.cnt() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">FunctionCnt&lt;<span class="title">void</span><span class="params">()</span>&gt; <span class="title">print_cnt</span><span class="params">(<span class="built_in">print</span>)</span></span>;</span><br><span class="line">    print_cnt();</span><br><span class="line">    print_cnt();</span><br><span class="line">    print_cnt();</span><br><span class="line">    print_cnt();</span><br><span class="line">    print_cnt();</span><br><span class="line">    print_cnt();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; print_cnt.cnt() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h1><p>绑定函数和参数，第一个参数是 函数名字，后面的指定实际传入参数对应到函数形参中位置或具体参数变量或值。</p><p>可以用一个<code>function</code>对象来接收</p><p>bind可以实现对函数或方法与参数的封装、、、</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_cnt</span><span class="params">(function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; func, <span class="keyword">int</span> &amp;n, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    n += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> func(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从一种传参形式的函数变成另一种传参函数</span></span><br><span class="line">    <span class="comment">//bind是模板方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// placeholders::_1 代表传参（）中的第一个参数</span></span><br><span class="line">    <span class="comment">// placeholders::_2 代表传参中的第二个参数</span></span><br><span class="line">    function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; f1 = bind(add, <span class="number">5</span>, placeholders::_1);</span><br><span class="line">    f1(<span class="number">3</span>), f1(<span class="number">4</span>), f1(<span class="number">5</span>);</span><br><span class="line">    function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f2 = bind(add, placeholders::_2, placeholders::_1);</span><br><span class="line">    f2(<span class="number">3</span>, <span class="number">4</span>), f2(<span class="number">5</span>, <span class="number">6</span>), f2(<span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f3 = bind(add2, placeholders::_2, <span class="number">6</span>, placeholders::_1);</span><br><span class="line">    f3(<span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f4 = bind(add2, placeholders::_1, placeholders::_3, placeholders::_2);</span><br><span class="line">    f4(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//绑定一个可以统计函数执行次数的方法</span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    因为 bind 是模板方法，我们在传第二个参数时，它并不知道 n 是一个引用，它会拷贝一个 n 给 add_cnt 的第二个</span></span><br><span class="line"><span class="comment">    参数 n, 因此统计函数执行次数时输出的结果是 0</span></span><br><span class="line"><span class="comment">    解决办法：</span></span><br><span class="line"><span class="comment">        在 n 传入时加 ref, ref()方法指明 n 是一个引用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f5 = bind(add_cnt, add, ref(n), placeholders::_1, placeholders::_2);</span><br><span class="line">    f5(<span class="number">89</span>, <span class="number">54</span>);</span><br><span class="line">    f5(<span class="number">55</span>, <span class="number">25</span>);</span><br><span class="line">    f5(<span class="number">77</span>, <span class="number">14</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/13/azyHqP.png" alt="azyHqP.png"></p><h1 id="thread类"><a href="#thread类" class="headerlink" title="thread类"></a>thread类</h1><p>用法和 bind 用法差不多, 比 c中的 thread方便多了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(func)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(func)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t3</span><span class="params">(func)</span></span>;</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    t3.join();</span><br><span class="line"></span><br><span class="line">    <span class="function">thread <span class="title">t4</span><span class="params">(func2, <span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t5</span><span class="params">(func2, <span class="number">5</span>)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t6</span><span class="params">(func2, <span class="number">6</span>)</span></span>;</span><br><span class="line">    t4.join();</span><br><span class="line">    t5.join();</span><br><span class="line">    t6.join();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="function">thread <span class="title">t7</span><span class="params">(func3, ref(n))</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t8</span><span class="params">(func3, ref(n))</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t9</span><span class="params">(func3, ref(n))</span></span>;</span><br><span class="line">    t7.join();</span><br><span class="line">    t8.join();</span><br><span class="line">    t9.join();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图灵完备性"><a href="#图灵完备性" class="headerlink" title="图灵完备性"></a>图灵完备性</h1><p>模板可以在编译阶段就把结果给计算出来这样就节约了大量的运行时间</p><p>下面代码在编译阶段就把结果计算了出来，让编译器运行帮我们计算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断奇偶</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IsEven</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = !(n % <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求a+b</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> a, <span class="keyword">int</span> b&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Add</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板实现递归(循环), 求 1-n的和</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sum</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = n + Sum&lt;n - <span class="number">1</span>&gt;::r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sum</span>&lt;0&gt; &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//求阶乘</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Factorial</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = n * Factorial&lt;n - <span class="number">1</span>&gt;::r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Factorial</span>&lt;1&gt; &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************判断素数1******************/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n, <span class="keyword">int</span> i&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">getNextN</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = (i * i &gt; n ? <span class="number">0</span> : n);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n, <span class="keyword">int</span> i&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">getNextI</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = (n % i == <span class="number">0</span> ? <span class="number">0</span> : i + <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n, <span class="keyword">int</span> i&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IsTest</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = IsTest&lt;getNextN&lt;n, i&gt;::r, getNextI&lt;n, i&gt;::r&gt;::r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> i&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IsTest</span>&lt;0, i&gt; &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> i&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IsTest</span>&lt;2, i&gt; &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IsTest</span>&lt;n, 0&gt; &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入口</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IsPrime</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = IsTest&lt;n, <span class="number">2</span>&gt;::r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*******************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************判断素数2*****************</span></span><br><span class="line"><span class="comment">template&lt;int n, int m&gt;</span></span><br><span class="line"><span class="comment">struct Check&#123;</span></span><br><span class="line"><span class="comment">    static constexpr bool r = (n % m != 0) &amp;&amp; Check&lt;n, m-1&gt;::r;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">template&lt;int n&gt;</span></span><br><span class="line"><span class="comment">struct Check&lt;n, 2&gt;&#123;</span></span><br><span class="line"><span class="comment">    static constexpr bool r = (n % 2 != 0);</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">template&lt;int n&gt;</span></span><br><span class="line"><span class="comment">struct IsPrime&#123;</span></span><br><span class="line"><span class="comment">    static constexpr int r = Check&lt;n, (int)sqrt(n)&gt;::r;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******求 n 内素数和****/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> n&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SumPrime</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = (n * IsPrime&lt;n&gt;::r) + SumPrime&lt;n - <span class="number">1</span>&gt;::r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SumPrime</span>&lt;1&gt; &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; IsEven&lt;<span class="number">123</span>&gt;::r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; IsEven&lt;<span class="number">124</span>&gt;::r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Add&lt;<span class="number">5</span>, <span class="number">7</span>&gt;::r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum&lt;<span class="number">10</span>&gt;::r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Sum&lt;<span class="number">100</span>&gt;::r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Factorial&lt;<span class="number">5</span>&gt;::r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Factorial&lt;<span class="number">10</span>&gt;::r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; IsPrime&lt;<span class="number">9973</span>&gt;::r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; IsPrime&lt;<span class="number">87</span>&gt;::r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; IsPrime&lt;<span class="number">1537</span>&gt;::r &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; IsPrime&lt;<span class="number">65</span>&gt;::r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; SumPrime&lt;<span class="number">10</span>&gt;::r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路径算法</title>
      <link href="/2020/08/12/1.%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/"/>
      <url>/2020/08/12/1.%E7%AE%97%E6%B3%95/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h1><blockquote><p>解决多源最短路径</p></blockquote><ul><li><p><strong>算法讲解</strong>：</p><p>  首先，<code>ans[x][x]:x到x的距离</code>置为0， 两点不通的置为一个极大值</p><p>  如果 <code>x</code> 到 <code>y</code> 中间不经过任何点，即 <code>x</code> 直接到 <code>y</code>, 则会有一个 距离 <code>ans[x][y]</code></p><p>  如果从 <code>x</code>到<code>y</code>中间经过点<code>1</code>,  则距离可表示为 <code>ans[x][y] = ans[x][1] + ans[1][y]</code>, 我们在这个值和原来的<code>ans[x][y]</code>中取一个较小值</p><p>  如果中间又可经过点<code>2</code>, 同理距离可表示为 <code>ans[x][y] = ans[x][2] + ans[2][y]</code>, 我们在这个值和上一个的<code>ans[x][y]</code>中取一个较小值， <strong>注意！上一个</strong><code>ans[x][y]</code><strong>是经过</strong> <code>1</code><strong>之后得到的较小值</strong></p>   <img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/12/avYh4K.png" alt="avYh4K.png" style="zoom:50%;" /><p>  因此，中间点可以从 1～n, 我们用一个for循环</p><p>  从 x 到 y又是一个两层循环</p></li></ul><ul><li><p><strong>例题</strong></p><p>  <a href="https://www.luogu.com.cn/problem/P4779">洛谷P4779 单源最短路径</a></p><p>  <img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/13/dpEasf.png" alt="dpEasf.png"></p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, ans[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0x3F</span>, <span class="keyword">sizeof</span>(ans));</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        ans[a][b] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ans[i][i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">                ans[j][k] = <span class="built_in">min</span>(ans[j][k], ans[j][i] + ans[i][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[s][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  当然这样做，不能通过！只是演示代码</p></li></ul><hr><h1 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h1><p>迪杰斯特拉算法</p>]]></content>
      
      
      <categories>
          
          <category> 算法学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 最短路径算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关键字和右值</title>
      <link href="/2020/08/12/c++/5.%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%8F%B3%E5%80%BC/"/>
      <url>/2020/08/12/c++/5.%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%8F%B3%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="关键字思考-c-11"><a href="#关键字思考-c-11" class="headerlink" title="关键字思考(c++11)"></a>关键字思考(c++11)</h1><h2 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h2><p>auto 关键字在编译阶段自动进行类型推导</p><p>遍历容器时使用更方便</p><p>四种情况不能用:</p><ul><li>不能用在函数参数</li><li>不能用在模板参数</li><li>不能定义数组</li><li>不能用于非静态成员变量</li></ul><p>（其实我发现，只要变量不初始化就用不了）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; arr;</span><br><span class="line">    arr[<span class="number">44848798</span>] = <span class="number">798213</span>;</span><br><span class="line">    arr[<span class="number">12265</span>] = <span class="number">320</span>;</span><br><span class="line">    arr[<span class="number">65</span>] = <span class="number">33022</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator iter = arr.<span class="built_in">begin</span>(); iter != arr.<span class="built_in">end</span>(); iter++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iter = arr.<span class="built_in">begin</span>(); iter != arr.<span class="built_in">end</span>(); iter++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; iter-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : arr) &#123;</span><br><span class="line">        <span class="comment">//c++11新语法</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; x.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/12/ajYmrR.png" alt="ajYmrR.png"></p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>作用在运行期</p><h2 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a>constexpr</h2><p>作用在编译期，在编译期就会确定表达式的具体值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//c++11 constexpr不能修饰递归函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * x * x + x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    constexpr A(int x, int y) : x(x), y(y) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> c = <span class="number">2</span> * b; <span class="comment">//const: 运行期状态, 这里发现编译的时候是不确定c的值的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="comment">//constexpr int m = 2 * n; //constexpr 修饰:编译器常量</span></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">int</span> m = <span class="number">2</span> * <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">int</span> x = f(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> A <span class="title">t</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>; <span class="comment">//初始化一个编译器的常量对象, 把构造函数前加constexpr</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; t.y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/12/ajNruj.png" alt="ajNruj.png"></p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ol><li>被final修饰的方法，子类不能进行重写</li><li>被final修饰的类，其他类不能进行继承</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> :</span> <span class="keyword">public</span> <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Claa A : hello world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="title">final</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line">    <span class="comment">//加上final, 此类不能再被继承</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> <span class="keyword">final</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加上final, 子类就不能在重写此方法</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Class B : hell world&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class C : public B &#123;</span></span><br><span class="line"><span class="comment"> public:</span></span><br><span class="line"><span class="comment">    //void say() &#123;</span></span><br><span class="line"><span class="comment">    //    cout &lt;, &quot;Class B : hell world&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    //&#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    a[<span class="number">55</span>] = <span class="number">569</span>;</span><br><span class="line">    a[<span class="number">215</span>] = <span class="number">545</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; x.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/12/ajt6fO.png" alt="ajt6fO.png"></p><h2 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h2><p>NULL 实际上是整型0，被强转了 (void*)0</p><p>而 nullptr本身就是一个地址，空的地址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;output in valu: &quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> *x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;output address: &quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="literal">NULL</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">123</span>, *p = &amp;n;</span><br><span class="line">    f(n);</span><br><span class="line">    f(p);</span><br><span class="line">    f(<span class="literal">nullptr</span>);</span><br><span class="line">    f((<span class="keyword">int</span>)<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/12/ajNkjJ.png" alt="ajNkjJ.png"></p><hr><h1 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h1><p>最大的作用就是区分流程</p><h3 id="左值和右值-1"><a href="#左值和右值-1" class="headerlink" title="左值和右值"></a>左值和右值</h3><blockquote><p>光哥：同一的变量，单一的方式，访问到同样的结果就是左值，否则为右值</p></blockquote><p><strong>说白了就是，可以为这个表达式或表量赋值，那么它就是左值，否则就是右值</strong></p><p>像一个中间产生的一个临时变量肯定给他赋不了值，它就是右值， 比如 <code>a = 12 + 13 + 16</code></p><p><code>12 + 13会生成一个临时变量，它是右值</code></p><p>比如<code>a++</code> ,想给 <code>(a++)</code> 赋值明显不能，那它就是右值</p><p>但是如果给<code>(++a)赋值是可以的</code>， 那 <code>++a</code>就是一个左值</p><blockquote><p>如何判断一个表达式是左值还是右值?</p></blockquote><p>​    定义一个传左值引用的函数，一个传右值引用的函数，倆函数同名，调用时将表达时传入，观察实际调用的是哪个函数来确定左右值</p><h3 id="左值引用和右值引用"><a href="#左值引用和右值引用" class="headerlink" title="左值引用和右值引用"></a>左值引用和右值引用</h3><p><code>&amp;</code>就是左值引用，  <code>&amp;&amp;</code>就是右值引用</p><p><strong>左值会优先绑定在左值引用上， 右值会优先绑定在右值引用上</strong></p><p>注意点：</p><ul><li><p>如果形参是左值引用，实参传的是一个右值，要想编译通过，就在形参前加 <code>const</code></p></li><li><p>一个形参是右值的函数，该参数在该函数内部实际上是一个左值</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> &amp;&amp;x)</span> </span>&#123;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这里的 <code>x</code>虽然是一个右值引用，但它在该函数内，进行运算赋值是可以的，因此是一个左值，如果在函数里再调用另外两个函数（同样一个是右值引用的，一个传左值引用的，它会优先调用左值引用的。 这并不是想要的结果</p><p>  因此**<code>forward&lt;&gt;</code>**帮我们解决的这一问题， 它会把变量转换为<code>&lt;&gt;</code>内的类型</p><p>  因此可以在<code>f</code>函数内添加一句    <code>forward&lt;int &amp;&amp;&gt;(x)</code></p></li><li><p>而 <code>move</code> 函数是将变量强制转换成一个 右值</p><p>  <code>move(x)</code></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST(a, f) &#123; \</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="meta">#a &lt;&lt;  <span class="meta-string">&quot; : &quot;</span> &lt;&lt; #f &lt;&lt; <span class="meta-string">&quot; &quot;</span>; \</span></span><br><span class="line">    f(a); \</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;left value&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> &amp;&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;right value&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;left value&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    TEST(x, f2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> &amp;&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;right value&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在f内部，这里x就是左值了，（可以放=左边）</span></span><br><span class="line">    <span class="comment">//TEST(x, f2); //这里就会按左值调用f2</span></span><br><span class="line">    </span><br><span class="line">    TEST(forward&lt;<span class="keyword">int</span> &amp;&amp;&gt;(x), f2); <span class="comment">//向前传递</span></span><br><span class="line"></span><br><span class="line">    TEST(<span class="built_in">move</span>(x), f2); <span class="comment">//强制变成右值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test_func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;&amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//x += 1;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//表达式的返回结果可以放在等号左边则为左值</span></span><br><span class="line">    <span class="keyword">int</span> a, b = <span class="number">1</span>, c = <span class="number">3</span>;</span><br><span class="line">    (++a) = b + c;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    (a++);</span><br><span class="line">    (a = b) = c;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line">    arr[<span class="number">3</span>] = <span class="number">12</span>;</span><br><span class="line">    (a += <span class="number">3</span>) = <span class="number">67</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    TEST(a += <span class="number">3</span>, f);</span><br><span class="line">    TEST(<span class="number">1</span> + <span class="number">4</span>, f);</span><br><span class="line">    TEST(b + c, f);</span><br><span class="line">    TEST(a++, f);</span><br><span class="line">    TEST(++a, f);</span><br><span class="line"></span><br><span class="line">    test_func(<span class="number">123</span>);</span><br><span class="line">    test_func(<span class="built_in">move</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/12/ajBQ8P.png" alt="ajBQ8P.png"></p><hr><h1 id="移动构造函数"><a href="#移动构造函数" class="headerlink" title="移动构造函数"></a>移动构造函数</h1><p>在进行对象拷贝时， 我们之前都是调用的拷贝构造函数</p><p>如果对象成员中有连续存储空间（如一个数组），我们为了能进行真正的拷贝（即深拷贝），我们还需要显示的写出来拷贝构造函数，并在函数内实际地去申请相应的空间。</p><p>如果将一个临时的对象拷贝给另一个对象，我们则需要为新对象的成员开辟空间，并把临时对象的成员空间释放(析构时自动释放的)，这样很不划算，新开辟的空间和释放的空间存储的内容相同，这样我们就进行了一次看似多余的拷贝。其实有更好的办法，就是不为对象开辟新空间，而是直接把该对象的成员的指针指向这个临时对象的成员的那片存储区，再把临时对象成员指向<code>nullptr</code> ,这样就把临时对象中的占用的存储空间移到了新的对象这里。</p><p>谁来完成这一个操作呢，没错，就是移动构造函数，我们需要把移动构造函数写出来，他的形参是一个右值引用。 当进行对象拷贝时， 它就会被调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> haizei &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">string</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span>() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;default constructor&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;__buff_size = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;buff = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;__buff_size];</span><br><span class="line">        <span class="keyword">this</span>-&gt;__length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span>(<span class="keyword">const</span> <span class="keyword">char</span> *str) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;const char constructor: &quot;</span>&lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;__buff_size = <span class="built_in">strlen</span>(str) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;buff = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;__buff_size];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;buff, str);</span><br><span class="line">        <span class="keyword">this</span>-&gt;__length = <span class="keyword">this</span>-&gt;__buff_size - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span>(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s) &#123;</span><br><span class="line">        <span class="comment">//左值拷贝</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;copy constructor&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;__buff_size = s.__buff_size;</span><br><span class="line">        <span class="keyword">this</span>-&gt;__length = s.__length;</span><br><span class="line">        <span class="keyword">this</span>-&gt;buff = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;__buff_size];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;buff, s.buff);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span>(<span class="built_in">string</span> &amp;&amp;s) &#123;</span><br><span class="line">        <span class="comment">//移动构造函数</span></span><br><span class="line">        <span class="comment">//右值拷贝，将临时对象的存储区直接转交给当前对象，当前对象就不用再开辟空间复制内容了</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;move constructor: &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; &amp;s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;__buff_size = s.__buff_size;</span><br><span class="line">        <span class="keyword">this</span>-&gt;__length = s.__length;</span><br><span class="line">        <span class="keyword">this</span>-&gt;buff = s.buff;</span><br><span class="line">        s.buff = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">c_str</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buff;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> ind) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;buff[ind];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> <span class="keyword">operator</span>+(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;operator + &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">size</span> = __length + s.__length + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> *temp = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">size</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(temp, <span class="keyword">this</span>-&gt;buff);</span><br><span class="line">        <span class="built_in">strcat</span>(temp, s.buff);</span><br><span class="line">        <span class="keyword">return</span> temp; <span class="comment">//这里会调用有参构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;__length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">char</span> &amp;<span class="title">at</span><span class="params">(<span class="keyword">int</span> ind)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//at是需要判断边界的</span></span><br><span class="line">        <span class="keyword">if</span> (ind &lt; <span class="number">0</span> || ind &gt;= __length) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;String Error : out of range&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> __end;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](ind);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">string</span>() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;destructor &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;buff) <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;buff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> __length, __buff_size;</span><br><span class="line">    <span class="keyword">char</span> *buff;</span><br><span class="line">    <span class="keyword">char</span> __end;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> haizei::<span class="built_in">string</span> &amp;s) &#123;</span><br><span class="line">    out &lt;&lt; s.c_str();</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    haizei::<span class="built_in">string</span> s1 = <span class="string">&quot;hello world&quot;</span>, s2 = <span class="string">&quot;, haizei&quot;</span>, s3 = <span class="string">&quot;, harbin.&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;======s4 begin=====&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    haizei::<span class="built_in">string</span> s4 = s1 + s2 + s3;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;======s4 end=======&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    haizei::<span class="built_in">string</span> s5 = s4;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s4 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s5 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    s4[<span class="number">3</span>] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s4 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s5 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    s1[<span class="number">3</span>] = <span class="string">&#x27;6&#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s1 + s2 + s3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s1[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>g++ -fno-elide-constructors</code> 选项可以使程序不进行返回值优化</p><p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/12/ajL8fI.png" alt="ajL8fI.png"><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/12/ajLt6f.png" alt="ajLt6f.png"></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态</title>
      <link href="/2020/08/09/c++/4.%E5%A4%9A%E6%80%81/"/>
      <url>/2020/08/09/c++/4.%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p> <img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/12/ajvKgI.png" alt="ajvKgI.png"></p><h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><a id="more"></a><ul><li><h2 id="普通成员方法跟着类走，-虚函数跟着对象走"><a href="#普通成员方法跟着类走，-虚函数跟着对象走" class="headerlink" title="普通成员方法跟着类走， 虚函数跟着对象走"></a><strong>普通成员方法跟着类走， 虚函数跟着对象走</strong></h2><ul><li><p>用父指针new出一个子对象，在没有虚函数的情况下，当父类指针调用同名方法时无法调用到子类的同名方法。</p><p>  虽然new出来的是子类对象。</p><p>  <strong>但调用普通方法时看的是前面的指针属于哪一个类就会调用哪一个类中的方法</strong></p></li><li><p>而如果有虚函数，调用虚函数时，<strong>看的是new出来的对象具体是哪一个类</strong>，对象属于哪一个类，就调用哪一个类的方法。</p><p>  这就是虚函数跟着对象走</p></li></ul></li></ul><ul><li><h2 id="虚函数声明"><a href="#虚函数声明" class="headerlink" title="虚函数声明"></a>虚函数声明</h2>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>  在方法前加<code>virtual</code>关键字</p><p>  <strong>virtual 关键字不能修饰类方法(static)</strong></p></li></ul><ul><li><h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li><p>纯虚函数也叫接口方法</p></li><li><p>拥有纯虚函数的类叫抽象类(接口)</p></li><li><p>抽象类不能实例化</p></li><li><p>子类必须实现纯虚函数</p></li></ul></li></ul><ul><li><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li><p><strong>只要有继承，父类的析构函数就必须声明为<code> virtual</code></strong> </p><ul><li><p><strong>确保能正确析构子类的空间</strong></p><p>  原因：用父类的指针<code>a</code>去指向一个<code>new</code>出来子类对象。</p><p>  如果父类析构函数没有声明为<code>virtual</code>, 那么析构函数就是普通成员方法（跟着类走），当<code>delete a</code>时，</p><p>  它会执行父类中的析构函数，而不会执行子类中析构函数，那也就并没有析构掉子类的空间。</p><p>  如果将父类析构函数声明为<code> virtual</code>, 那么析构函数就会跟着对象走，<code>new</code>出来什么对象，就会执行哪个对象的析构函数</p><p>  这样就会正确析构子类和父类</p></li><li><p>它可以方便进行类型转换 <code>dynamic_cast</code></p></li></ul></li><li><p><strong><code>override</code>必须写</strong></p><p>  当子类重写父类方法时，务必要在方法名后面加上<code>override</code>，它能将运行期的错误变成编译期的错误</p><p>  如果不写，一旦重写父类方法时把方法名字写错，那在编译期是看不到的</p></li></ul></li></ul><h1 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h1><p>在一个对象的存储空间中，最上面是一个8字节的虚函数表指针，他指向虚函数表，虚函数表存储所有虚函数的地址</p><p>一个类有一张虚函数表，他的所有对象的虚函数表指针都指向同一张虚函数表。</p><p><strong>this指针说明</strong>:</p><p>实际上在成员方法中，第一个参数是 this指针，他是隐藏起来的</p><p> <img src= "/img/loading.gif" data-lazy-src="https://wx2.sbimg.cn/2020/08/17/3JeEV.png" alt="3JeEV.png"></p><h2 id="虚函数表的发现与验证"><a href="#虚函数表的发现与验证" class="headerlink" title="虚函数表的发现与验证"></a>虚函数表的发现与验证</h2><p>当父类中没有虚函数时，输出子类对象的大小，发现和我们预期一致</p><p>当在父类中添加一个虚函数或多个虚函数时，发现子类对象的大小都会只增多8字节，猜测多了个函数指针，这就是虚函数表的地址</p><p>在外部定义一个函数指针，通过一个对象来找到虚函数表，并调用虚函数表中的方法，发现与猜测结果相同</p><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><p>通过函数指针调用虚函数时，我们传一个参数，发现并不能正常调用虚函数了，这是因为虚函数第一个参数是一个隐藏的this指针，我们就显式的多传一个参数</p><p>第一个给他传一个对象的地址，发现调用的正是该对象的虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I don&#x27;t know how to run&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I can run with four legs&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I can run with four legs, tail yao a yao!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bat</span> :</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I can fly!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    A() = <span class="keyword">default</span>;</span><br><span class="line">    A(<span class="built_in">string</span> s) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;param constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    A(<span class="keyword">const</span> A &amp;a) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;copy constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(<span class="keyword">int</span> xx)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Class A : I can say, xx = &quot;</span> &lt;&lt; xx &lt;&lt; <span class="string">&quot;, this-&gt;x = &quot;</span>&lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*func)</span><span class="params">(<span class="keyword">void</span> *, <span class="keyword">int</span>)</span></span>; <span class="comment">//函数指针</span></span><br><span class="line"></span><br><span class="line"><span class="function">A <span class="title">retA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">temp_a</span><span class="params">(<span class="string">&quot;hello world&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> temp_a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    Base() &#123; </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = <span class="keyword">new</span> <span class="keyword">int</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Base() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base destructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> *x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base_A</span>:</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    Base_A() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base_A constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Base_A() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Base_A destructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> *y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base *ba = <span class="keyword">new</span> Base_A();</span><br><span class="line">    <span class="keyword">delete</span> ba; <span class="comment">//普通的成员方法跟着类走，执行此句就不会调用Base_A的~Base_A();</span></span><br><span class="line">    <span class="comment">//因此父类的析构函数一定得是虚函数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(A) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    A temp_a, temp_b;</span><br><span class="line">    temp_a.x = <span class="number">9973</span>;</span><br><span class="line">    temp_b.x = <span class="number">10000</span>;</span><br><span class="line">    temp_a.say(<span class="number">67</span>);</span><br><span class="line">    A temp_c = retA();</span><br><span class="line">    </span><br><span class="line">    ((func **)(&amp;temp_a))[<span class="number">0</span>][<span class="number">0</span>](&amp;temp_b, <span class="number">6</span>);  </span><br><span class="line">    <span class="comment">//用函数指针来调用虚函数表中的方法, 并且给虚函数say传参数</span></span><br><span class="line">    <span class="comment">//虽然say中只有一个参数，但实际上，他还有一个隐藏的this, 第一个参数实际就是this, 隐藏了</span></span><br><span class="line">    <span class="comment">//我们在这里通过函数指针来调用这个方法时，第一个方法就要传进去一个实际的对象地址</span></span><br><span class="line">    <span class="comment">//他才会正确调用该对象的say方法</span></span><br><span class="line">    <span class="comment">//这里虽然是通过temp_a对象找到的虚函数表中的say,但他并不会调用temp_a的say方法，他具体看的是第一个参数this指针是指向谁，</span></span><br><span class="line">    <span class="comment">//我们传进去temp_b的地址，他自然也就会调用temp_b的say方法, 并且把 6 作为复制给第二的参数 xx</span></span><br><span class="line">    <span class="comment">//我们在say中输出 this, 发现他确实也不是 temp_a 的地址</span></span><br><span class="line">    </span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    Cat a;</span><br><span class="line">    Animal &amp;b = a;</span><br><span class="line">    Animal *c[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(Cat) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rand() % <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: c[i] = <span class="keyword">new</span> Cat(); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: c[i] = <span class="keyword">new</span> Dog(); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: c[i] = <span class="keyword">new</span> Bat(); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        c[i]-&gt;<span class="built_in">run</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果： <img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/12/ajvxqf.png" alt="ajvxqf.png"></p><h1 id="dynamic-cast"><a href="#dynamic-cast" class="headerlink" title="dynamic_cast"></a>dynamic_cast</h1><p>这个类来做父类和子类的类型转换，当转换失败时就会返回NULL</p><p><strong>父类对象地址能否转换成一个子类对象指针，对比的就是他们的虚函数表指针是否相同</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~A() &#123;&#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is class B, x = &quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is class C, x =&quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is class D, x =&quot;</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_dynamic_cast</span><span class="params">(A *ta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> **pa = (<span class="keyword">char</span> **)(ta);</span><br><span class="line">    <span class="keyword">char</span> **pb = (<span class="keyword">char</span> **)(<span class="keyword">new</span> B());</span><br><span class="line">    <span class="keyword">char</span> **pc = (<span class="keyword">char</span> **)(<span class="keyword">new</span> C());</span><br><span class="line">    <span class="keyword">char</span> **pd = (<span class="keyword">char</span> **)(<span class="keyword">new</span> D());</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pa[<span class="number">0</span>] == pb[<span class="number">0</span>]) ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pa[<span class="number">0</span>] == pc[<span class="number">0</span>]) ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pa[<span class="number">0</span>] == pd[<span class="number">0</span>]) ret = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    A *pa;</span><br><span class="line">    B *pb;</span><br><span class="line">    C *pc;</span><br><span class="line">    D *pd;</span><br><span class="line">    <span class="keyword">switch</span> (rand() % <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: pb = <span class="keyword">new</span> B(); pa = pb; pb-&gt;x = <span class="number">254</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: pc = <span class="keyword">new</span> C(); pa = pc; pc-&gt;x = <span class="number">565.5</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: pd = <span class="keyword">new</span> D(); pa = pd; pd-&gt;x = <span class="string">&quot;hell world&quot;</span>; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((pb = <span class="keyword">dynamic_cast</span>&lt;B *&gt;(pa))) &#123;</span><br><span class="line">        <span class="comment">//转换失败返回NULL;</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;class B :&quot;</span>;</span><br><span class="line">        pb-&gt;sayB();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((pc = <span class="keyword">dynamic_cast</span>&lt;C *&gt;(pa))) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;class C :&quot;</span>;</span><br><span class="line">        pc-&gt;sayC();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((pd = <span class="keyword">dynamic_cast</span>&lt;D *&gt;(pa))) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;class D :&quot;</span>;</span><br><span class="line">        pd-&gt;sayD();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (my_dynamic_cast(pa)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: ((B *)(pa))-&gt;sayB(); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: ((C *)(pa))-&gt;sayC(); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: ((D *)(pa))-&gt;sayD(); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多态练习"><a href="#多态练习" class="headerlink" title="多态练习"></a>多态练习</h1><p>实现一个自定义哈希函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> haizei &#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IHashFunc</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span>)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*HashFunt_T)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    HashTable(HashFunt_T);</span><br><span class="line">    HashTable(IHashFunc &amp;);</span><br><span class="line">    <span class="keyword">int</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    HashTable(HashFunt_T, IHashFunc *, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> hash_type;</span><br><span class="line">    HashFunt_T func1;</span><br><span class="line">    IHashFunc *func2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> __size;</span><br><span class="line">    PII **data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">HashTable::HashTable(HashFunt_T func1, IHashFunc *func2, <span class="keyword">int</span> hash_type)</span><br><span class="line">: func1(func1), func2(func2), hash_type(hash_type) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;__size = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;data = <span class="keyword">new</span> PII*[<span class="keyword">this</span>-&gt;__size];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;__size; i++) <span class="keyword">this</span>-&gt;data[i] = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HashTable::HashTable(HashFunt_T func) </span><br><span class="line">: HashTable(func, <span class="literal">nullptr</span>, <span class="number">1</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HashTable::HashTable(IHashFunc &amp;func)</span><br><span class="line">: HashTable(<span class="literal">nullptr</span>, &amp;func, <span class="number">2</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> &amp;HashTable::<span class="keyword">operator</span>[](<span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (hash_type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: hash = func1(x); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: hash = (*func2)(x); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hash &lt; <span class="number">0</span>) hash &amp;= <span class="number">0x7fffffff</span>;</span><br><span class="line">        <span class="keyword">int</span> ind = hash % __size, t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (data[ind] &amp;&amp; data[ind]-&gt;first != x) &#123;</span><br><span class="line">            ind += t * t;</span><br><span class="line">            <span class="keyword">if</span> (ind &lt; <span class="number">0</span>) ind = ind &amp; <span class="number">0x7fffffff</span>;</span><br><span class="line">            ind %= __size;</span><br><span class="line">            t += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (data[ind] == <span class="literal">nullptr</span>) data[ind] = <span class="keyword">new</span> PII(x, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> data[ind]-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">//end of namespace haizei</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt;&lt; <span class="number">1</span>) ^ (x &lt;&lt; <span class="number">3</span>) ^ (x &gt;&gt; <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHashFunc</span> :</span> <span class="keyword">public</span> haizei::IHashFunc &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x &lt;&lt; <span class="number">1</span>) ^ (x &lt;&lt; <span class="number">3</span>) ^ (x &gt;&gt; <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyHashFunc hash2;</span><br><span class="line">    <span class="function">haizei::HashTable <span class="title">h1</span><span class="params">(hash1)</span></span>;</span><br><span class="line">    <span class="function">haizei::HashTable <span class="title">h2</span><span class="params">(hash2)</span></span>;    </span><br><span class="line">    h1[<span class="number">123</span>] = <span class="number">354</span>;</span><br><span class="line">    h2[<span class="number">123</span>] = <span class="number">345</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; h1[<span class="number">123</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; h2[<span class="number">123</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; h1[<span class="number">789</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; h2[<span class="number">10000</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符重载</title>
      <link href="/2020/08/09/c++/3.%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
      <url>/2020/08/09/c++/3.%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="简易cout、cin的实现"><a href="#简易cout、cin的实现" class="headerlink" title="简易cout、cin的实现"></a>简易cout、cin的实现</h1><p><strong>类内重载</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己写一个命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> myspace &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">istream</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//返回对象的引用:为了一直使用这个cin对象，避免再拷贝一份</span></span><br><span class="line">    istream &amp;<span class="keyword">operator</span>&gt;&gt;(<span class="keyword">int</span> &amp;n) &#123;</span><br><span class="line">        <span class="comment">//参数传引用，避免再拷贝一份n</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n; <span class="comment">//可以用scanf来实现</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ostream</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ostream &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">int</span> &amp;n) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n; <span class="comment">//可用printf(&quot;%g&quot;)来实现</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ostream &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">char</span> *msg) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; msg;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">istream <span class="built_in">cin</span>;</span><br><span class="line">ostream <span class="built_in">cout</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    myspace::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m; <span class="comment">//系统默认为执行 cin.operator&gt;&gt;(n)</span></span><br><span class="line">    myspace::<span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;  m &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类外重载</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己写一个命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> myspace &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">istream</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//返回对象的引用:为了一直使用这个cin对象，避免再拷贝一份</span></span><br><span class="line">    istream &amp;<span class="keyword">operator</span>&gt;&gt;(<span class="keyword">int</span> &amp;n) &#123;</span><br><span class="line">        <span class="comment">//参数传引用，避免再拷贝一份n</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ostream</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ostream &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">int</span> &amp;n) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ostream &amp;<span class="keyword">operator</span>&lt;&lt;(<span class="keyword">const</span> <span class="keyword">char</span> *msg) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; msg;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">istream <span class="built_in">cin</span>;</span><br><span class="line">ostream <span class="built_in">cout</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外重载运算符</span></span><br><span class="line">myspace::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(myspace::ostream &amp;out, <span class="keyword">double</span> &amp;z) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; z;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>+(ostream &amp;out, <span class="keyword">const</span> <span class="keyword">int</span> &amp;a) &#123;</span><br><span class="line">    <span class="comment">//这时的a不仅可以是传过来的常量(子面量)也可以是变量</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; n: 系统会将其转化为 cin.oprator&gt;&gt;(n)</span></span><br><span class="line">    myspace::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    myspace::<span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;  m &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">double</span> k = <span class="number">5.5</span>;</span><br><span class="line">    myspace::<span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    (((((<span class="built_in">cout</span> + <span class="number">8</span>) &lt;&lt; <span class="string">&quot; &quot;</span>) + <span class="number">9</span> )&lt;&lt; <span class="string">&quot; &quot;</span>) + <span class="number">10</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">//要注意 + 和 &lt;&lt; 的优先级</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="重载实战"><a href="#重载实战" class="headerlink" title="重载实战"></a>重载实战</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重载运算符的方法的参数个数一定要和原来运算符的目数相同</span></span><br><span class="line"><span class="comment">//优先匹配类内重载</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    Point() : __x(<span class="number">0</span>), __y(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y) : __x(x), __y(y) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">y</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __y; &#125;</span><br><span class="line">    </span><br><span class="line">    Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x() + a.x(), y() + a.y());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Point &amp;<span class="keyword">operator</span>+=(<span class="keyword">const</span> Point &amp;a) &#123;</span><br><span class="line">        __x += a.x();</span><br><span class="line">        __y += a.y();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Point &amp;<span class="keyword">operator</span>++() &#123;</span><br><span class="line">        <span class="comment">//前++</span></span><br><span class="line">        __x += <span class="number">1</span>;</span><br><span class="line">        __y += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Point <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">        <span class="comment">//后++</span></span><br><span class="line">        <span class="comment">//返回不能是引用，因为方法一结束，temp就没了，所以要返回一个temp的拷贝</span></span><br><span class="line">        <span class="function">Point <span class="title">temp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        __x += <span class="number">1</span>;</span><br><span class="line">        __y += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> __x, __y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> Point &amp;a) &#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&quot;Point (&quot;</span> &lt;&lt; a.x() &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; a.y() &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Point a(4, 5), b(3, 4), c(1, 1);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a + b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pre incr: &quot;</span> &lt;&lt; ++(c += b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//++(c += b);</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;after incr: &quot;</span> &lt;&lt; c++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, m = <span class="number">7</span>;</span><br><span class="line">    (n += m)++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特殊运算符的重载</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    A() &#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    A(<span class="keyword">const</span> A &amp;a) : A() &#123;</span><br><span class="line">        <span class="comment">//深拷贝，系统默认拷贝构造是浅拷贝()</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;arr[i] = a.arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = a.x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = a.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> *arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B() : obj(<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="number">9972</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    B(A *obj) : B() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> ind) &#123;</span><br><span class="line">        <span class="comment">//返回引用,返回的是ind处的变量</span></span><br><span class="line">        <span class="keyword">return</span> arr[ind];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>[](<span class="keyword">const</span> <span class="keyword">char</span> *msg) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; msg &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    A *<span class="keyword">operator</span>-&gt;() &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    A &amp;<span class="keyword">operator</span>*() &#123;</span><br><span class="line">        <span class="keyword">return</span> *obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~B() &#123;</span><br><span class="line">        <span class="keyword">delete</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> *arr;</span><br><span class="line">    A *obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> A &amp;a) &#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&quot;A(&quot;</span> &lt;&lt; a.x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; a.y &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数中是外部表现，类中是内部实现</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B add;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; add(<span class="number">3</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//函数对象(像函数的对象)，重载()</span></span><br><span class="line">    add[<span class="number">3</span>] = <span class="number">787</span>; <span class="comment">//数组对象, 重载[]</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; add[<span class="number">3</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    add[<span class="string">&quot;hello world&quot;</span>];</span><br><span class="line"></span><br><span class="line">    A a, b(a); <span class="comment">//浅拷贝</span></span><br><span class="line">    a.x = <span class="number">87</span>, a.y = <span class="number">852</span>;</span><br><span class="line">    B p = &amp;a; <span class="comment">//指针对象</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p-&gt;x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    a.arr[<span class="number">3</span>] = <span class="number">111</span>;</span><br><span class="line">    b.arr[<span class="number">3</span>] = <span class="number">222</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a.arr[<span class="number">3</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b.arr[<span class="number">3</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntArray</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    IntArray(<span class="keyword">int</span> n) : n(n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IntArray(IntArray &amp;obj) : n(obj.n)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;arr[i] = obj[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> ind) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ind &gt;= <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>-&gt;arr[ind];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>-&gt;arr[<span class="keyword">this</span>-&gt;n + ind];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>+=(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;arr[i] += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IntArray <span class="keyword">operator</span>++(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="comment">//后++, 无论后++还是前++都是要加的。所以要提前拷贝一份返回加之前的样子.</span></span><br><span class="line">        <span class="function">IntArray <span class="title">temp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;n; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;arr[i] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IntArray &amp;<span class="keyword">operator</span>++() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;n; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;arr[i] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;, <span class="keyword">const</span> IntArray &amp;);</span><br><span class="line">    ~IntArray() &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;arr;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> *arr, n;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> IntArray &amp;a) &#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&quot;[ &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.n; i++) &#123;</span><br><span class="line">        out &lt;&lt; a.arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="function">IntArray <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        a[i] = rand() % <span class="number">100</span>; <span class="comment">//！！这里要注意一下如何重载[], a[i]返回值应该是arr[i]这个变量的引用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出数组中所有的元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a[<span class="number">4</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a[<span class="number">-2</span>] &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出倒数第2位的值</span></span><br><span class="line">    a += <span class="number">5</span>; <span class="comment">//给数组的所有元素都加5</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出数组中所有的元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (a++) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//给数组中所有元素都加1</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (++a) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//给数组中所有元素都加1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="/2020/08/09/c++/2.%E7%BB%A7%E6%89%BF/"/>
      <url>/2020/08/09/c++/2.%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><a id="more"></a><p>继承,父类中的所有属性都会包含进子类中<br>子类在内存中的存储，前半部分是存储父类的信息，后半部分是存储的本身的属性。所以子类对象的地址可以看成一个父类对象的地址</p><ul><li><strong>继承-子类的访问权限</strong><br>  子类无论是public继承、protected继承 还是private继承，他都无法访问到父类中private中的东西。但是父类中的public、protected都可以访问<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730132335707.png" alt="在这里插入图片描述"></li><li><strong>继承-对外的访问权限</strong></li></ul><p>==继承权限影响的是<strong>外部</strong>对子类中的 <strong>继承自父类的</strong> 属性和方法的访问权限==</p><p>==这些权限只能缩小不能放大==<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730132544776.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    Animal(<span class="built_in">string</span> name, <span class="keyword">int</span> age) : __name(name), age(age) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;my name is: &quot;</span> &lt;&lt; __name  &lt;&lt; <span class="string">&quot;my age is: &quot;</span> &lt;&lt; age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">string</span> __name;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"> <span class="keyword">public</span> :</span><br><span class="line">    Cat() = <span class="keyword">delete</span>;</span><br><span class="line">    Cat(<span class="built_in">string</span> name, <span class="keyword">int</span> age) : Animal(name, age) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bat</span> :</span> <span class="keyword">protected</span> Animal &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    Bat() = <span class="keyword">delete</span>;</span><br><span class="line">    Bat(<span class="built_in">string</span> name, <span class="keyword">int</span> age) : Animal(name, age) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//this-&gt;Animal::say();</span></span><br><span class="line">        Animal::say();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Bat name: &quot;</span> &lt;&lt; __name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;Bat age: &quot; &lt;&lt; age &lt;&lt; endl; //访问不了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Cat <span class="title">a</span><span class="params">(<span class="string">&quot;kitty&quot;</span>, <span class="number">29</span>)</span></span>; </span><br><span class="line">    a.say();</span><br><span class="line">    <span class="function">Bat <span class="title">b</span><span class="params">(<span class="string">&quot;hug&quot;</span>, <span class="number">16384</span>)</span></span>;</span><br><span class="line">    b.say();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h1><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020073013381388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDExOTg4MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>c++支持多继承，但容易出现菱形继承，尽量避免这种情况出现</p><h1 id="继承中的构造函数如何工作"><a href="#继承中的构造函数如何工作" class="headerlink" title="继承中的构造函数如何工作"></a>继承中的构造函数如何工作</h1><p>子类的构造函数  ： <code>Cat() : 初始化列表 &#123;构造逻辑&#125; </code><br>在初始化列表结束后，初始化其实就已经完成了<br>初始化列表可以显式的调用父类的构造函数，也可以隐式的不写(自动调用父类的默认构造函数)</p><p>子类实例化一个对象：<br>    1. 会先调用子类构造函数 <code>Cat()</code><br>    2. 执行初始化参数列表（这里会先调用父类的构造函数，其次初始化子类中的属性）<br>    3. 父类构造结束，然后子类的构造在结束<br>    4. 再执行子类构造函数中的{构造逻辑}</p><p>==因此说：父类先完成构造，子类后完成构造==<br>注意！！：在初始化列表中初始化子类的属性时、书写属性的顺序与初始化的顺序无关而与属性在子类中的声明顺序有关</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    D() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;D constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">    ~D() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;D destructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    A() = <span class="keyword">delete</span>;</span><br><span class="line">    A(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;A constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">    ~A() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;A destructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    B() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;B constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">    ~B() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;B destructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> D &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    C() : a(<span class="number">3</span>, <span class="number">4</span>), b() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125; <span class="comment">//显示的写出来初始化列表</span></span><br><span class="line">    ~C() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C destructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">    B b;</span><br><span class="line">    A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C c;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730141008582.png" alt="在这里插入图片描述"></p><h1 id="继承中的拷贝构造函数"><a href="#继承中的拷贝构造函数" class="headerlink" title="继承中的拷贝构造函数"></a>继承中的拷贝构造函数</h1><p>在子类构造函数中如果要调用父类的拷贝构造函数，就需要在初始化列表中显式的写出来，否则会默认调用父类的默认构造函数<br>子类在内存中的存储，前半部分是存储父类的信息，后半部分是存储的本身的属性。所以子类对象的地址可以看成一个父类对象的地址，子类的地址就可以赋给父类指针。</p><p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730133946707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDExOTg4MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    A() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;class A constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = <span class="number">0x01020304</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    A(<span class="keyword">const</span> A &amp;a) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;class A copy constructor&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    B() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = <span class="number">0x05060708</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;class B constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    B(<span class="keyword">const</span> B &amp;b) : A(b) &#123;</span><br><span class="line">        <span class="comment">//要显示的调用父类的构造，否则默认是调用默认构造</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;class B copy constructor&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    B b1;</span><br><span class="line">    <span class="function">B <span class="title">b2</span><span class="params">(b1)</span></span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *msg = (<span class="keyword">const</span> <span class="keyword">char</span> *)(&amp;b1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(B); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%X&quot;</span>, msg[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730143049288.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类与对象</title>
      <link href="/2020/08/09/c++/1.%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
      <url>/2020/08/09/c++/1.%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="成员属性与方法"><a href="#成员属性与方法" class="headerlink" title="成员属性与方法"></a>成员属性与方法</h1><hr><p>每个对象都有自己的一份属性和方法</p><hr><h1 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h1><p><strong>public</strong> ：公共访问属性。<br><strong>protected</strong> ： 私有访问属性。孩子们和自己可以访问属性，其他的不可以<br><strong>private</strong>：受保护的访问权限。<br><strong>friend</strong> ：是类外的一个函数，类中将一函数声明为friend，该函数就可以访问类中的成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">People</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>; <span class="comment">//友元函数</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">People2</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">People::set</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;set function: &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">People::say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    People a;</span><br><span class="line">    People2 b;</span><br><span class="line">    a.<span class="built_in">set</span>(<span class="number">3</span>);</span><br><span class="line">    a.y = <span class="number">18432</span>;</span><br><span class="line">    a.say();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a object: &quot;</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    b.x = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b.x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200727152429661.png" alt="在这里插入图片描述"></p><hr><h1 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h1><p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200727153133822.png" alt="在这里插入图片描述"></p><h2 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h2><p>系统默认存在没有参数的什么也不做的构造函数<br>系统自动调用</p><h2 id="有参构造函数"><a href="#有参构造函数" class="headerlink" title="有参构造函数"></a>有参构造函数</h2><p>自己写一个有参的构造函数，默认的就没了</p><h3 id="转换构造函数"><a href="#转换构造函数" class="headerlink" title="转换构造函数"></a>转换构造函数</h3><p>有参构造函数但只有一个参数</p><h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>同类型的对象复制<br>默认拷贝：逐个将对象的每个成员变量拷贝给另一个对象（如果源对象中有个指针，默认拷贝的话，那就会把指针的值拷贝一份，那样这两对象中的指针就会指向同一个空间，就不会实现真正的拷贝，看代码）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    A() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> *arr;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1;</span><br><span class="line">    a1.x = <span class="number">3</span>, a1.y = <span class="number">4</span>;</span><br><span class="line">    A a2 = a1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a1.x:&quot;</span> &lt;&lt; a1.x &lt;&lt; <span class="string">&quot;  a1.y:&quot;</span> &lt;&lt; a1.y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a2.x:&quot;</span> &lt;&lt; a2.x &lt;&lt; <span class="string">&quot;  a2.y:&quot;</span> &lt;&lt; a2.y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    a1.x = <span class="number">555</span>;</span><br><span class="line">    a2.x = <span class="number">666</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a1.x:&quot;</span> &lt;&lt; a1.x &lt;&lt; <span class="string">&quot;  a1.y:&quot;</span> &lt;&lt; a1.y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a2.x:&quot;</span> &lt;&lt; a2.x &lt;&lt; <span class="string">&quot;  a2.y:&quot;</span> &lt;&lt; a2.y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    a1.arr[<span class="number">0</span>] = <span class="number">89</span>;</span><br><span class="line">    a2.arr[<span class="number">0</span>] = <span class="number">79988</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a1.arr[0]:&quot;</span> &lt;&lt; a1.arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a2.arr[0]:&quot;</span> &lt;&lt; a2.arr[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200730125524406.png" alt="在这里插入图片描述"></p><ul><li>浅拷贝<br>  系统的默认的拷贝,上面代码</li><li>深拷贝<br>  为了解决默认拷贝构造的bug,就需要自己写一个拷贝构造函数,(在自己写的拷贝构造函数中重新开辟自己指针所指向的空间。）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A(<span class="keyword">const</span> A &amp;obj) : x(obj.x), y(obj.y) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(<span class="keyword">this</span>-&gt;arr, obj.arr, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="复制赋值运算符"><a href="#复制赋值运算符" class="headerlink" title="复制赋值运算符"></a>复制赋值运算符</h2><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>函数结束系统自动调用，析构函数的调用顺序与构造函数的调用顺序正好相反<br>因为后构造的可能会依赖到先构造的，如果先把先构造的给析构掉就可能出错</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    People() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;默认构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//People() = default; //默认构造函数</span></span><br><span class="line">    People(<span class="built_in">string</span> name) &#123;</span><br><span class="line">        <span class="comment">//有参构造函数（因为形参只有一个，也叫转换构造函数）</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;param constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    People(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="comment">//同上</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;int param constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    People(<span class="keyword">const</span> People &amp;a) &#123;</span><br><span class="line">        <span class="comment">//拷贝构造函数，这里的参数必须是引用</span></span><br><span class="line">        <span class="comment">//否则，形参也会调用拷贝构造函数，会发生无限循环的调用</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;copy constructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = a.name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = a.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> People &amp;a) &#123;</span><br><span class="line">        <span class="comment">//赋值运算符</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;operator =&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = a.name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = a.x;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    ~People() &#123;</span><br><span class="line">        <span class="comment">//析构函数</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;destructor&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">incr</span><span class="params">(<span class="keyword">int</span> &amp;a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//引用小示例</span></span><br><span class="line">    a += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(People a, People b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x + b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    People f; <span class="comment">//调用默认构造函数 </span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">7</span>;</span><br><span class="line">    incr(n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//4, 5会自动调用转换构造函数，先转换成People对象. add函数结束并调用两次析构函数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; add(<span class="number">4</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">    <span class="function">People <span class="title">a</span><span class="params">(<span class="string">&quot;hug&quot;</span>)</span></span>; <span class="comment">//调用(一个参数的)有参构造函数(转换构造函数)</span></span><br><span class="line">    People b = <span class="built_in">string</span>(<span class="string">&quot;hug&quot;</span>); <span class="comment">//同上</span></span><br><span class="line">    <span class="function">People <span class="title">c</span><span class="params">(<span class="number">543</span>)</span></span>; <span class="comment">//同上</span></span><br><span class="line">    People d = <span class="number">678</span>; <span class="comment">//同上</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c.x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; d.x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//c = 987重点理解：987会先调用转换构造函数生成一个对象赋值给C, </span></span><br><span class="line">    <span class="comment">//赋值给C时注意！！这时候调用的不是转换构造函数也不是拷贝构造函数</span></span><br><span class="line">    <span class="comment">//因为此时的C已不再是初次定义，因此它这次调用的是 赋值运算符函数！</span></span><br><span class="line">    <span class="comment">//赋值给C之后，987生成的匿名对象会再调用析构函数。</span></span><br><span class="line">    c = <span class="number">987</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c.x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    d = <span class="built_in">string</span>(<span class="string">&quot;xiaoming&quot;</span>); <span class="comment">//调用有参构造函数(转换构造函数)</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; d.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    People e = a; <span class="comment">//调用拷贝构造函数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; e.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; e.x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    c = a; <span class="comment">//c不是首次定义，此时调用赋值运算符函数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c.x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果 </p><p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200727160510794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDExOTg4MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h1 id="类属性与方法"><a href="#类属性与方法" class="headerlink" title="类属性与方法"></a>类属性与方法</h1><p>static 修饰<br>所有对象共享一份</p><hr><h1 id="const方法"><a href="#const方法" class="headerlink" title="const方法"></a>const方法</h1><p>不去修改任何成员属性的值<br>const 限定符，它把一个对象转换成一个常量。</p><h1 id="对象与引用"><a href="#对象与引用" class="headerlink" title="对象与引用"></a>对象与引用</h1><hr><h1 id="c-中的结构体与类"><a href="#c-中的结构体与类" class="headerlink" title="c++中的结构体与类"></a>c++中的结构体与类</h1><p>C++中的struct实际是个类，里面的属性方法默认是public<br>类中写个属性或方法默认是private</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    Point() &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;constructor : &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        Point::total_cnt += <span class="number">1</span>;</span><br><span class="line">        seek_cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point(<span class="keyword">const</span> Point &amp;a) : Point() &#123;</span><br><span class="line">        <span class="comment">//拷贝构造函数。会先调用默认构造函数</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;copy constructor : &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = a.x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = a.y;</span><br><span class="line">    &#125;</span><br><span class="line">    Point(<span class="keyword">double</span> z) : Point() &#123;</span><br><span class="line">        <span class="comment">//转换构造函数。会先调用默认构造函数</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;convert constructor : &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = <span class="number">99</span>, <span class="keyword">this</span>-&gt;y = <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y) : Point() &#123;</span><br><span class="line">        <span class="comment">//有参构造函数。会先调用默认构造函数</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;param constructor : &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> Point &amp;a) &#123;</span><br><span class="line">        <span class="comment">//赋值运算符。会先调用默认构造函数</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;operator= : &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = a.x, <span class="keyword">this</span>-&gt;y = a.y;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x, <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">seek</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        seek_cnt += <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">S</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> seek_cnt; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">T</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Point::total_cnt; &#125; <span class="comment">//类方法，所有对象共享一个,访问方法Point::</span></span><br><span class="line"></span><br><span class="line">    ~Point() &#123;</span><br><span class="line">        <span class="comment">//析构函数</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;destructor : &quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        Point::total_cnt -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="keyword">int</span> seek_cnt; <span class="comment">//如果想在const函数中修改一变量，就在声明变量时前面加一个mutable</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> total_cnt; <span class="comment">//类属性，在类外初始化，所有对象共享一个</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Point::total_cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Point a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Point::T() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Point a; <span class="comment">//调用默认构造函数, total_cnt++</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a.T() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//调用类方法, total_cnt = 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在test函数中：先调用默认构造函数, total_cnt++</span></span><br><span class="line">    <span class="comment">//再调用类方法 total_cnt = 2</span></span><br><span class="line">    test(); <span class="comment">//函数结束调用析构函数析构掉test中的a, total_cnt--, total_cnt = 1</span></span><br><span class="line">    </span><br><span class="line">    Point b; <span class="comment">//调用默认构造函数, total_cnt++</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b.T() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//调用类方法， total_cnt = 2;</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">c</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>; <span class="comment">//先调用默认构造函数 total_cnt++，再调用有参构造函数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c.T() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//total_cnt = 3</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">d</span><span class="params">(<span class="number">3.4</span>)</span></span>; <span class="comment">//先调用默认构造函数 total_cnt++, 再调用转换构造函数</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; d.T() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//total_cnt = 4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重点理解：5.6（先会调用默认构造函数 total_cnt++）调用转换构造函数生成匿名对象</span></span><br><span class="line">    <span class="comment">//再调用赋值运算符赋值给c </span></span><br><span class="line">    <span class="comment">//赋值结束，5.6生成的匿名对象调用析构函数 total_cnt--</span></span><br><span class="line">    c = <span class="number">5.6</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c.T() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//total_cnt = 4</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; &amp;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; &amp;c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; &amp;d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    d.seek();</span><br><span class="line">    c.seek();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> Point <span class="title">e</span><span class="params">(<span class="number">6</span>, <span class="number">7</span>)</span></span>; <span class="comment">//const类型的类不能修改，只能调用const修饰的方法</span></span><br><span class="line">    e.seek();</span><br><span class="line">    e.seek();</span><br><span class="line">    e.seek();</span><br><span class="line">    e.seek();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; e.S() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200727173109857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDExOTg4MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"  /><h1 id="返回值优化"><a href="#返回值优化" class="headerlink" title="返回值优化"></a>返回值优化</h1><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200727173301471.png" alt="在这里插入图片描述"><br>最初是<br>“hug”先生成一个对象，拷贝给temp_a<br>temp_a再生成一个匿名对象拷贝给a</p><h2 id="三五法则"><a href="#三五法则" class="headerlink" title="三五法则"></a>三五法则</h2><p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200727174413296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDExOTg4MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2020/08/06/2.DataStructure/"/>
      <url>/2020/08/06/2.DataStructure/</url>
      
        <content type="html"><![CDATA[<p><strong>数据结构 = 结构定义 + 结构操作</strong></p><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vector</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    <span class="keyword">int</span> size, length;</span><br><span class="line">&#125; Vector;</span><br><span class="line"></span><br><span class="line"><span class="function">Vector *<span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    Vector *vec = (Vector *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Vector));</span><br><span class="line">    vec-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">    vec-&gt;size = n;</span><br><span class="line">    vec-&gt;length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> vec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩容(倍增思想)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">expand</span><span class="params">(Vector *vec)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//vec-&gt;size *= 2;</span></span><br><span class="line">    <span class="comment">//vec-&gt;data = (int *)realloc(vec-&gt;data, sizeof(int) * vec-&gt;size);</span></span><br><span class="line">    <span class="comment">//return 1;</span></span><br><span class="line">    <span class="keyword">int</span> extr_size = vec-&gt;size;</span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">    <span class="keyword">while</span>(extr_size) &#123;</span><br><span class="line">        p = (<span class="keyword">int</span> *)<span class="built_in">realloc</span>(vec-&gt;data, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (vec-&gt;size + extr_size));</span><br><span class="line">        <span class="keyword">if</span>(p) <span class="keyword">break</span>;</span><br><span class="line">        extr_size /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    vec-&gt;data = p;</span><br><span class="line">    vec-&gt;size += extr_size;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Vector *vec, <span class="keyword">int</span> ind, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ind &lt; <span class="number">0</span> || ind &gt; vec-&gt;length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(vec-&gt;length == vec-&gt;size) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!expand(vec)) &#123;</span><br><span class="line">            <span class="comment">//printf(&quot;扩容失败\n&quot;);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;expand succeddfully! szie = %d\n&quot;</span>, vec-&gt;size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = vec-&gt;length; i &gt; ind; i--) &#123;</span><br><span class="line">        vec-&gt;data[i] = vec-&gt;data[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    vec-&gt;data[ind] = val;</span><br><span class="line">    vec-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">erase</span><span class="params">(Vector *vec, <span class="keyword">int</span> ind)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ind &lt; <span class="number">0</span> || ind &gt;= vec-&gt;length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = ind + <span class="number">1</span>; i &lt; vec-&gt;length; i++) &#123;</span><br><span class="line">        vec-&gt;data[i - <span class="number">1</span>] = vec-&gt;data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    vec-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Vector *vec)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Vector(%d) = [&quot;</span>, vec-&gt;length);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec-&gt;length; i++) &#123;</span><br><span class="line">        <span class="function">i &amp;&amp; <span class="title">printf</span><span class="params">(<span class="string">&quot;, &quot;</span>)</span></span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, vec-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Vector *vec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vec == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">free</span>(vec-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(vec);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//随机种子</span></span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> max_op 20</span></span><br><span class="line">    Vector *vec = init(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> op, ind, val;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max_op; i++) &#123;</span><br><span class="line">        op = rand() % <span class="number">4</span>;</span><br><span class="line">        ind = rand() % (vec-&gt;length + <span class="number">3</span>) - <span class="number">1</span>;</span><br><span class="line">        val = rand() % <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">switch</span>(op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: </span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;insert %d at %d to Vector = %d\n&quot;</span>, val, ind, insert(vec, ind, val));</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;erase item at %d from Vector = %d\n&quot;</span>, ind, erase(vec, ind));</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        output(vec);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    clear(vec);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>创建，初始化，插入，删除，遍历输出，反转，清空</p><h2 id="普通链表"><a href="#普通链表" class="headerlink" title="普通链表"></a>普通链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; ListNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span> &#123;</span></span><br><span class="line">    ListNode head;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125; List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ListNode *<span class="title">getNewNode</span> <span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    ListNode *p = (ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">    p-&gt;data = val;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">List *<span class="title">getLinkList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List *l = (List*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">    l-&gt;head.next = <span class="literal">NULL</span>;</span><br><span class="line">    l-&gt;length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(List *l, <span class="keyword">int</span> ind, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ind &lt; <span class="number">0</span> || ind &gt; l-&gt;length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ListNode *p = &amp;(l-&gt;head), *node = getNewNode(val);</span><br><span class="line">    <span class="keyword">while</span>(ind--) p = p-&gt;next;</span><br><span class="line">    node-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = node;</span><br><span class="line">    l-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">erase</span><span class="params">(List *l, <span class="keyword">int</span> ind)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ind &lt; <span class="number">0</span> || ind &gt;= l-&gt;length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ListNode *p = &amp;(l-&gt;head), *q;</span><br><span class="line">    <span class="keyword">while</span>(ind--) p = p-&gt;next;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    l-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//链表反转</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List *l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    ListNode *p = l-&gt;head.next, *q;</span><br><span class="line">    l-&gt;head.next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        p-&gt;next = l-&gt;head.next;</span><br><span class="line">        l-&gt;head.next = p;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(List *l)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;List(%d) = [&quot;</span>, l-&gt;length);</span><br><span class="line">    <span class="keyword">for</span>(ListNode *p = l-&gt;head.next; p; p = p-&gt;next) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>, p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL]\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_ListNode</span><span class="params">(ListNode *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">free</span>(node);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_List</span><span class="params">(List *l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    ListNode *p = l-&gt;head.next, *q;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        clear_ListNode(p);</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(l);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> max_op 20</span></span><br><span class="line">    List *l = getLinkList();</span><br><span class="line">    <span class="keyword">int</span> op, ind, val;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max_op; i++) &#123;</span><br><span class="line">        op = rand() % <span class="number">4</span>;</span><br><span class="line">        ind = rand() % (l-&gt;length + <span class="number">3</span>) - <span class="number">1</span>;</span><br><span class="line">        val = rand() % <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">switch</span>(op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;insert %d at %d to List = %d\n&quot;</span>, val, ind, insert(l, ind, val));</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;revere List:&quot;</span>);</span><br><span class="line">                reverse(l);</span><br><span class="line">                output(l);</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;erase item at %d from List = %d\n&quot;</span>, ind, erase(l, ind));</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        output(l);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    clear_List(l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h2><p>约瑟夫问题</p><blockquote><ol><li>定义一个遍历指针，初始指向 head，并让 head 指向空地址避免操作结束后变为野指针。</li><li>找到遍历指针往后数的第 n 次所指向的结点。</li><li>输出该结点的数据，更新遍历指针，然后删除该结点。</li><li>重复操作 2 直至只剩下最后一个结点。</li><li>输出最后一个结点并删除。</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node, *LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkedList <span class="title">insert</span><span class="params">(LinkedList head, Node *node, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        head = node;</span><br><span class="line">        head-&gt;next = head;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        node-&gt;next = head-&gt;next;</span><br><span class="line">        head-&gt;next = node;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *current_node = head-&gt;next;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (current_node != head &amp;&amp; count &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">        current_node = current_node-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count == index - <span class="number">1</span>) &#123;</span><br><span class="line">        node-&gt;next = current_node-&gt;next;</span><br><span class="line">        current_node-&gt;next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node == head-&gt;next) &#123;</span><br><span class="line">        head = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请在下面实现输出函数 output_josephus</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output_josephus</span><span class="params">(LinkedList head, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    Node *current_node = head;</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(current_node-&gt;next != current_node) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            current_node = current_node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, current_node-&gt;next-&gt;data);</span><br><span class="line">        Node *delete_node = current_node-&gt;next;</span><br><span class="line">        current_node-&gt;next = current_node-&gt;next-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(delete_node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, current_node-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(current_node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkedList linkedlist = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        Node *node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        node-&gt;data = i;</span><br><span class="line">        node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        linkedlist = insert(linkedlist, node, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    output_josephus(linkedlist, m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><h2 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">prior</span>, *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node, *List;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">typedef struct List &#123;</span></span><br><span class="line"><span class="comment">    Node *head;</span></span><br><span class="line"><span class="comment">    int length;</span></span><br><span class="line"><span class="comment">&#125; List;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List <span class="title">insert</span><span class="params">(List head, Node *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        head = node;</span><br><span class="line">        head-&gt;next = head;</span><br><span class="line">        head-&gt;prior = head;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;next = head-&gt;next;</span><br><span class="line">    node-&gt;prior = head;</span><br><span class="line">    head-&gt;next-&gt;prior = node;</span><br><span class="line">    head-&gt;next = node;</span><br><span class="line">    head = node;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(List head, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    Node *p = head;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;data != m) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//p = p-&gt;prior;</span></span><br><span class="line">    Node *q = p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, q-&gt;data);</span><br><span class="line">    <span class="keyword">while</span>(q-&gt;prior != p) &#123;</span><br><span class="line">        q = q-&gt;prior;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, q-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(List l)</span> </span>&#123;</span><br><span class="line">    Node *p = l-&gt;next, *q;</span><br><span class="line">    <span class="keyword">while</span>(p != l) &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(l);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List <span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">        Node *node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        node-&gt;data = a;</span><br><span class="line">        node-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">        node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">list</span> = insert(<span class="built_in">list</span>, node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    output(<span class="built_in">list</span>, m);</span><br><span class="line">    clear(<span class="built_in">list</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表环的问题"><a href="#链表环的问题" class="headerlink" title="链表环的问题 "></a>链表环的问题 <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgtYtpvMyy3NAXXNA0U_837_373.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%22742721380:742721380%22,%22msgId%22:%224160368139072%22%7D&bizType=im&open_id=742721380" alt="img"></h2><p> <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDiCprnhvsXXNAsTNA1g_856_708.png_620x10000q90g.jpg?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%22742721380:742721380%22,%22msgId%22:%224148240629495%22%7D&bizType=im&open_id=742721380" alt="图片"><img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDhYBMoo5N4HNAhnNA1c_855_537.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%22742721380:742721380%22,%22msgId%22:%224160464360800%22%7D&bizType=im&open_id=742721380" alt="img"><img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9uVJlvYfNAjDNA0s_843_560.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%22742721380:742721380%22,%22msgId%22:%224160496372662%22%7D&bizType=im&open_id=742721380" alt="img"></p><hr><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    <span class="keyword">int</span> head, tail, size, count;</span><br><span class="line">&#125; Queue;</span><br><span class="line"></span><br><span class="line"><span class="function">Queue *<span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    Queue *q = (Queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    q-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">    q-&gt;size = n, q-&gt;head = <span class="number">0</span>, q-&gt;tail = <span class="number">0</span>, q-&gt;count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !q-&gt;count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">front</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;data[q-&gt;head];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(Queue *q, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;count == q-&gt;size) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    q-&gt;data[q-&gt;tail++] = val;</span><br><span class="line">    <span class="comment">//q-&gt;tail = (q-&gt;tail + 1) % q-&gt;size;</span></span><br><span class="line">    <span class="keyword">if</span>(q-&gt;tail == q-&gt;size) q-&gt;tail -= q-&gt;size;</span><br><span class="line">    q-&gt;count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Queue(%d) = [&quot;</span>, q-&gt;count);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i= q-&gt;head, j = <span class="number">0</span>; j &lt; q-&gt;count; j++) &#123;</span><br><span class="line">        <span class="function">j &amp;&amp; <span class="title">printf</span><span class="params">(<span class="string">&quot;, &quot;</span>)</span></span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, q-&gt;data[(i + j) % (q-&gt;size)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(empty(q)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    q-&gt;head++;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;head == q-&gt;size) q-&gt;head -= q-&gt;size;</span><br><span class="line">    q-&gt;count--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">free</span>(q-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> max_op 20</span></span><br><span class="line">    Queue *<span class="built_in">queue</span> = init(max_op);</span><br><span class="line">    <span class="keyword">int</span> op, val;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max_op; i++) &#123;</span><br><span class="line">        op = rand() % <span class="number">4</span>;</span><br><span class="line">        val = rand() % <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">switch</span>(op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;push %d to Queue = %d\n&quot;</span>, val, push(<span class="built_in">queue</span>, val));</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;pop %d from Queue = &quot;</span>, front(<span class="built_in">queue</span>));</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(<span class="built_in">queue</span>));</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        output(<span class="built_in">queue</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><hr><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="普通栈"><a href="#普通栈" class="headerlink" title="普通栈"></a>普通栈</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    <span class="keyword">int</span> top, size;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line"><span class="function">Stack *<span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    Stack *s = (Stack *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">    s-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">    s-&gt;top = <span class="number">-1</span>;</span><br><span class="line">    s-&gt;size = n;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(Stack *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">(Stack *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;data[s-&gt;top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">expand</span><span class="params">(Stack *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ext_size = s-&gt;size * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">    <span class="keyword">while</span>(ext_size) &#123;</span><br><span class="line">        p = (<span class="keyword">int</span> *)<span class="built_in">realloc</span>(s-&gt;data, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (s-&gt;size + ext_size));</span><br><span class="line">        <span class="keyword">if</span>(p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ext_size /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    s-&gt;data = p;</span><br><span class="line">    s-&gt;size += ext_size;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(Stack *s, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top + <span class="number">1</span> == s-&gt;size)&#123;</span><br><span class="line">        <span class="keyword">if</span>(expand(s) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;data[++(s-&gt;top)] = val;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(Stack *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(empty(s)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    s-&gt;top -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Stack *s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack(%d) = [&quot;</span>, s-&gt;top + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= s-&gt;top; i++) &#123;</span><br><span class="line">        <span class="function">i &amp;&amp; <span class="title">printf</span><span class="params">(<span class="string">&quot;, &quot;</span>)</span></span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, s-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Stack *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">free</span>(s-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> max_op 20</span></span><br><span class="line">    <span class="keyword">int</span> op, val;</span><br><span class="line">    Stack *s = init(max_op);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max_op; i++) &#123;</span><br><span class="line">        op =  rand() % <span class="number">4</span>;</span><br><span class="line">        val = rand() % <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">switch</span>(op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;push %d to Stack = %d\n&quot;</span>, val, push(s, val));  </span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;pop %d from Stack = &quot;</span>, top(s));</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pop(s));</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        output(s);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    clear(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>表达式求值</strong></p><blockquote><ol><li>使用两个栈分别存储数值和运算符。</li><li>读取表达式字符，数值存入数值栈，运算符和栈顶运算符比较优先级。</li><li>通过运算符优先级不同选择将它压入栈或取出数值栈中两个元素进行计算，计算结果入栈。</li><li>返回步骤 2，直至表达式全部读完。</li><li>弹出一个运算符和两个数值进行运算，计算结果存储数值栈。</li><li>当运算符栈不为空时，返回步骤 5，否则数值栈中剩余的最后一个元素就是表达式求值结果。</li></ol></blockquote><p>利用系统栈，即递归</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max_n 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> prior = <span class="number">0x3f3f3f3f</span> - <span class="number">1</span>, temp = <span class="number">0</span>, pos = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur_prior = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">switch</span>(str[i]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span> : </span><br><span class="line">                temp += <span class="number">100</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span> :</span><br><span class="line">                temp -= <span class="number">100</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span> :</span><br><span class="line">                cur_prior = temp + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span> :</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span> :</span><br><span class="line">                cur_prior = temp + <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span> :</span><br><span class="line">                cur_prior = temp + <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur_prior &lt;= prior) &#123;</span><br><span class="line">            pos = i;</span><br><span class="line">            prior = cur_prior;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pos == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] &lt; <span class="string">&#x27;0&#x27;</span> || str[i] &gt; <span class="string">&#x27;9&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            num = num * <span class="number">10</span> + str[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a = calc(str, l, pos - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> b = calc(str, pos + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">switch</span> (str[pos]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> a + b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> a - b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> a * b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> a / b;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>: <span class="keyword">return</span> (<span class="keyword">int</span>)<span class="built_in">pow</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[max_n + <span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]s&quot;</span>, str) != EOF) &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, calc(str, <span class="number">0</span>, <span class="built_in">strlen</span>(str) - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><hr><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><strong>性质：</strong></p><blockquote><p>  <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rnnKQZ7NASnNBHg_1144_297.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%22742721380:742721380%22,%22msgId%22:%222301936150127%22%7D&bizType=im&open_id=742721380" alt="img">     </p></blockquote><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><blockquote><p>  递归的输出</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_order</span><span class="params">(pNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;l) pre_order(p-&gt;l);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;r) pre_order(p-&gt;r);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in_order</span><span class="params">(pNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;l) in_order(p-&gt;l);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;r) in_order(p-&gt;r);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">post_order</span><span class="params">(pNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;l) post_order(p-&gt;l);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;r) post_order(p-&gt;r);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的层次遍历"><a href="#二叉树的层次遍历" class="headerlink" title="二叉树的层次遍历"></a>二叉树的层次遍历</h2><p>孩子入队后爹出对</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">将广义表转成二叉树再以层次遍历输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">l</span>, *<span class="title">r</span>;</span></span><br><span class="line">&#125; Node, *pNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    pNode *data;</span><br><span class="line">    <span class="keyword">int</span> top, size;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line">    pNode *data;</span><br><span class="line">    <span class="keyword">int</span> head, tail, size, cnt;</span><br><span class="line">&#125; Queue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_stack</span><span class="params">(Stack *s, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    s-&gt;data = (pNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(pNode) * len); <span class="comment">//???????????????????????????????????????????????????</span></span><br><span class="line">    s-&gt;top = <span class="number">-1</span>;</span><br><span class="line">    s-&gt;size = len;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(Stack *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(Stack *s, pNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top + <span class="number">1</span> &gt;= s-&gt;size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;data[++(s-&gt;top)] = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pNode <span class="title">top</span><span class="params">(Stack *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(empty(s)) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;data[s-&gt;top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(Stack *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(empty(s)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    s-&gt;top--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Stack *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">free</span>(s-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_queue</span><span class="params">(Queue *q, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    q-&gt;data = (pNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(pNode) * (<span class="number">2</span> * len));</span><br><span class="line">    q-&gt;size = len;</span><br><span class="line">    q-&gt;head = <span class="number">0</span>;</span><br><span class="line">    q-&gt;tail = <span class="number">-1</span>;</span><br><span class="line">    q-&gt;cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty_queue</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;tail &lt; q-&gt; head; <span class="comment">//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push_queue</span><span class="params">(Queue *q, pNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;tail &gt;= q-&gt;size) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    q-&gt;data[++(q-&gt;tail)] = p; <span class="comment">//xxxxxxxxxxxxxxxxxxxxxxxxtailduojialexxxxxxxxxxxxxxxxxxx</span></span><br><span class="line">    q-&gt;cnt++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop_queue</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(empty_queue(q)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    q-&gt;head++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_queue</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">free</span>(q-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//树的操作</span></span><br><span class="line"><span class="function">Node *<span class="title">get_node</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    Node *node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));  <span class="comment">//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line">    node-&gt;data = c;</span><br><span class="line">    node-&gt;l = node-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_node</span><span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(node-&gt;l) clear_node(node-&gt;l);</span><br><span class="line">    <span class="keyword">if</span>(node-&gt;r) clear_node(node-&gt;r);</span><br><span class="line">    <span class="built_in">free</span>(node);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pNode <span class="title">built_tree</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> *node_num)</span> </span>&#123;</span><br><span class="line">    pNode temp = <span class="literal">NULL</span>, current_root = <span class="literal">NULL</span>;</span><br><span class="line">    Stack *s = (Stack *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack));  <span class="comment">//?</span></span><br><span class="line">    init_stack(s, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(str[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(str[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                push(s, temp);</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                temp = <span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                temp = <span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                current_root = top(s);</span><br><span class="line">                pop(s);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                temp = get_node(str[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">if</span>(!empty(s) &amp;&amp; flag == <span class="number">0</span>) &#123;</span><br><span class="line">                    s-&gt;data[s-&gt;top]-&gt;l = temp;    <span class="comment">//xxxxxxxxxxxxxx</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!empty(s) &amp;&amp; flag == <span class="number">1</span>)&#123;</span><br><span class="line">                    s-&gt;data[s-&gt;top]-&gt;r = temp; <span class="comment">//xxxxxxxxxxxx top(s)-&gt;r=.. 不对  xxxxxxxxxxxxxxx</span></span><br><span class="line">                &#125;</span><br><span class="line">                ++(*node_num);</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//xxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line">        &#125;</span><br><span class="line">        str++; <span class="comment">//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx忘写，导致我关机两次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp &amp;&amp; !current_root) current_root = temp; <span class="comment">//xxxx***</span></span><br><span class="line">    clear(s); <span class="comment">//忘写</span></span><br><span class="line">    <span class="keyword">return</span> current_root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍  层次遍历输出 ✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍✍</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(pNode node, <span class="keyword">int</span> node_num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node_num == <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, node-&gt;data);</span><br><span class="line">    Queue *q = (Queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    init_queue(q, node_num);</span><br><span class="line">    push_queue(q, node);</span><br><span class="line">    <span class="keyword">while</span>(!empty_queue(q)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(q-&gt;data[q-&gt;head]-&gt;l == <span class="literal">NULL</span> &amp;&amp; q-&gt;data[q-&gt;head]-&gt;r == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            pop_queue(q);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q-&gt;data[q-&gt;head]-&gt;l) &#123;</span><br><span class="line">            push_queue(q, q-&gt;data[q-&gt;head]-&gt;l);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>, q-&gt;data[q-&gt;head]-&gt;l-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q-&gt;data[q-&gt;head]-&gt;r) &#123;</span><br><span class="line">            push_queue(q, q-&gt;data[q-&gt;head]-&gt;r);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>, q-&gt;data[q-&gt;head]-&gt;r-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">        pop_queue(q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    clear_queue(q);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in_order</span><span class="params">(pNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;l) in_order(p-&gt;l);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;data);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;r) in_order(p-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]s&quot;</span>, str);</span><br><span class="line">    <span class="keyword">int</span> node_num = <span class="number">0</span>;</span><br><span class="line">    pNode tree = built_tree(str, &amp;node_num);</span><br><span class="line">    output(tree, node_num);</span><br><span class="line">    clear_node(tree);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树加线索化"><a href="#二叉树加线索化" class="headerlink" title="二叉树加线索化"></a>二叉树加线索化</h2><p>后孩子若为空就让右孩子指针域指向其后继</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NORMAL 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="keyword">int</span> ltag, rtag;</span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">getNewNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    Node *p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;data = val;</span><br><span class="line">    p-&gt;lchild = p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;ltag = NORMAL;</span><br><span class="line">    p-&gt;rtag = NORMAL;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">insert</span><span class="params">(Node *root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> getNewNode(val);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;data == val) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (val &lt; root-&gt;data) root-&gt;lchild = insert(root-&gt;lchild, val);</span><br><span class="line">    <span class="keyword">else</span> root-&gt;rchild = insert(root-&gt;rchild, val);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_thread</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">static</span> Node *pre = <span class="literal">NULL</span>;</span><br><span class="line">    build_thread(root-&gt;lchild);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        root-&gt;lchild = pre;</span><br><span class="line">        root-&gt;ltag = THREAD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;rchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        pre-&gt;rchild = root;</span><br><span class="line">        pre-&gt;rtag = THREAD;</span><br><span class="line">    &#125;</span><br><span class="line">    pre = root;</span><br><span class="line">    build_thread(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">most_left</span><span class="params">(Node *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p-&gt;ltag == NORMAL &amp;&amp; p-&gt;lchild != <span class="literal">NULL</span>) p = p-&gt;lchild;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    Node *p = most_left(root);</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;rtag == THREAD) &#123;</span><br><span class="line">            p = p-&gt;rchild;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p = most_left(p-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in_order</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;ltag == NORMAL) in_order(root-&gt;lchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;rtag == NORMAL) in_order(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;ltag == NORMAL) clear(root-&gt;lchild);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;rtag == NORMAL) clear(root-&gt;rchild);</span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> max_op 20</span></span><br><span class="line">    Node *root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max_op; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = rand() % <span class="number">100</span>;</span><br><span class="line">        root = insert(root, val);</span><br><span class="line">    &#125;</span><br><span class="line">    build_thread(root);</span><br><span class="line">    output(root), <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    in_order(root), <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    clear(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广义表和二叉树"><a href="#广义表和二叉树" class="headerlink" title="广义表和二叉树"></a>广义表和二叉树</h2><h3 id="1-由广义表创建二叉树"><a href="#1-由广义表创建二叉树" class="headerlink" title="1.由广义表创建二叉树"></a><strong>1.由广义表创建二叉树</strong></h3><blockquote><p>   借助栈，栈里元素存节点的地址</p></blockquote><blockquote>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">设置一个标记变量 flag，初始为 <span class="number">0</span>；</span><br><span class="line">设置一个标记节点 temp,当前层父节current_root(即栈顶元素，每次出栈时赋值给current_root)</span><br><span class="line">循环遍历存储广义表的字符串 str：</span><br><span class="line">如果 str[i] 是 <span class="string">&#x27;(&#x27;</span>：</span><br><span class="line">    (遇到<span class="string">&#x27;(&#x27;</span>此时的p才能当爹，因为<span class="string">&#x27;(&#x27;</span>后面就开始是他的孩子了，这时让他进栈)</span><br><span class="line">    则设置 flag 为 <span class="number">0</span>；(因为<span class="string">&#x27;(&#x27;</span>后面第一个是他左孩子，要用flag == <span class="number">0</span>来识别)</span><br><span class="line">    把 temp 压入栈中。</span><br><span class="line">    temp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">否则如果 str[i] <span class="string">&#x27;,&#x27;</span>：</span><br><span class="line">    则设置flag为 <span class="number">1</span>; (因为<span class="string">&#x27;，&#x27;</span>后面一个是他右孩子，要用flag == <span class="number">1</span>来识别)</span><br><span class="line">    temp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">否则如果 str[i] 是 <span class="string">&#x27;)&#x27;</span>：</span><br><span class="line">    则栈顶元素出栈;(当前栈顶元素出栈)</span><br><span class="line">    current_root = top(s);</span><br><span class="line">    pop(s);</span><br><span class="line"></span><br><span class="line">否则如果 str[i] 是 <span class="string">&#x27; &#x27;</span>：<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">否则如果 str[i] 是一个字母:</span><br><span class="line">    用节点 temp 来存储：</span><br><span class="line">    如果 flag 为 <span class="number">0</span>：</span><br><span class="line">        将 temp 作为栈顶节点的左孩子；</span><br><span class="line">    如果 k 为 <span class="number">1</span>：</span><br><span class="line">        将 temp 作为栈顶节点的右孩子；</span><br><span class="line">    (另外可以用一个传出参数来记录节点个数)</span><br><span class="line">      </span><br><span class="line">最后要判断栈是否为空，若为空说明没遇到<span class="string">&#x27;(&#x27;</span>,则只有一个根结点，直接把temp赋值给current_root</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">l</span>, *<span class="title">r</span>;</span></span><br><span class="line">&#125;Node, *pNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    pNode *data;</span><br><span class="line">    <span class="keyword">int</span> top, size;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_stack</span><span class="params">(Stack *s, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    s-&gt;data = (pNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(pNode) * len);</span><br><span class="line">    s-&gt;size = len;</span><br><span class="line">    s-&gt;top = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(Stack *s, pNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top + <span class="number">1</span> &gt;= s-&gt;size) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    s-&gt;data[++(s-&gt;top)] = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(Stack *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pNode <span class="title">top</span><span class="params">(Stack *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(empty(s)) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;data[s-&gt;top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(Stack *s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(empty(s)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    s-&gt;top -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_stack</span><span class="params">(Stack *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">free</span>(s-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">get_node</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    Node* p = (pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;data = c;</span><br><span class="line">    p-&gt;l = p-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_node</span> <span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(node-&gt;l) clear_node(node-&gt;l);</span><br><span class="line">    <span class="keyword">if</span>(node-&gt;r) clear_node(node-&gt;r);</span><br><span class="line">    <span class="built_in">free</span>(node);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pNode <span class="title">build</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> *tree_node_num)</span> </span>&#123;</span><br><span class="line">    pNode temp = <span class="literal">NULL</span>, current_root = <span class="literal">NULL</span>;</span><br><span class="line">    Stack *s = (Stack *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">    init_stack(s, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(str[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (str[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span> :</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                push(s, temp);</span><br><span class="line">                temp = <span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span> :</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                temp = <span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span> :</span><br><span class="line">                current_root = top(s);</span><br><span class="line">                pop(s);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> :</span><br><span class="line">                temp = get_node(str[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">if</span>(!empty(s) &amp;&amp; flag == <span class="number">0</span>) &#123;</span><br><span class="line">                    s-&gt;data[s-&gt;top]-&gt;l = temp;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!empty(s) &amp;&amp; flag == <span class="number">1</span>) &#123;</span><br><span class="line">                    s-&gt;data[s-&gt;top]-&gt;r = temp;</span><br><span class="line">                &#125;</span><br><span class="line">                ++(*tree_node_num);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp &amp;&amp; !current_root) current_root = temp; <span class="comment">//一个根结点</span></span><br><span class="line">    clear_stack(s);</span><br><span class="line">    <span class="keyword">return</span> current_root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_order</span><span class="params">(pNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;l) pre_order(p-&gt;l);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;r) pre_order(p-&gt;r);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in_order</span><span class="params">(pNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;l) in_order(p-&gt;l);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;r) in_order(p-&gt;r);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">post_order</span><span class="params">(pNode p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;l) post_order(p-&gt;l);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;r) post_order(p-&gt;r);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">35</span>] = &#123;<span class="number">0</span>&#125;, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]s&quot;</span>, str);</span><br><span class="line">    <span class="keyword">int</span> tree_node_num = <span class="number">0</span>;</span><br><span class="line">    pNode tree = build(str, &amp;(tree_node_num));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;前序:&quot;</span>);</span><br><span class="line">    pre_order(tree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;中序:&quot;</span>);</span><br><span class="line">    in_order(tree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;后序:&quot;</span>);</span><br><span class="line">    post_order(tree);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-二叉树生成广义表"><a href="#2-二叉树生成广义表" class="headerlink" title="2.二叉树生成广义表"></a><strong>2.二叉树生成广义表</strong></h3><blockquote><pre><code>  输出节点存储的值；  如果左孩子不为空：      输出 &quot;(&quot;；      递归输出左子树；      如果右孩子为空：      输出 &quot;)&quot;。  如果右孩子不为空：      如果左孩子为空：          输出 &quot;(&quot;。      输出 “,”；      递归输出右子树；      输出 &quot;)&quot;。</code></pre></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Node *p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;data);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;l == <span class="literal">NULL</span> &amp;&amp; p-&gt;r == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;l) &#123;</span><br><span class="line">        output(p-&gt;l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;r) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        output(p-&gt;r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">     <span class="keyword">return</span> ;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="堆和优先队列"><a href="#堆和优先队列" class="headerlink" title="堆和优先队列"></a>堆和优先队列</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rp3mr13M-c0EVg_1110_249.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%22742721380:742721380%22,%22msgId%22:%222356481472671%22%7D&bizType=im&open_id=742721380" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rp380kHMps0EXg_1118_166.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%22742721380:742721380%22,%22msgId%22:%222350400351755%22%7D&bizType=im&open_id=742721380" alt="img"></p><h2 id="插入操作："><a href="#插入操作：" class="headerlink" title="插入操作："></a><strong>插入操作：</strong></h2><ol><li>把新元素保存在数组的最后。</li><li>找到新插入元素的父节点位置。</li><li>将新元素与父节点比较大小。</li><li>若新插入的元素与其父节点大小不符合堆序性则交换它和父节点的位置，并回到步骤 2；若符合则插入操作完成。</li></ol><h2 id="删除操作："><a href="#删除操作：" class="headerlink" title="删除操作："></a><strong>删除操作：</strong></h2><ol><li>将堆顶元素和最后一个元素交换。</li><li>删除堆的最后一个元素。</li><li>自顶向下调整元素的位置，使之满足堆序性。</li></ol><h2 id="堆排序：-将大根堆有小到大排序为例："><a href="#堆排序：-将大根堆有小到大排序为例：" class="headerlink" title="堆排序：(将大根堆有小到大排序为例：)"></a><strong>堆排序：</strong>(将大根堆有小到大排序为例：)</h2><ol><li>将变量 i 设为堆末下标。</li><li>交换堆顶和第 i 个元素。</li><li>自上到下调整堆顶到第 i 个元素之间的堆结构，使之保持堆序性。</li><li>将 i 前移一位，重复步骤 2，直至 i 等于 1。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计蒜客写法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Heap</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data, size;</span><br><span class="line">&#125; Heap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Heap *h, <span class="keyword">int</span> length_input)</span> </span>&#123;</span><br><span class="line">    h-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * length_input);</span><br><span class="line">    h-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(Heap *h, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    h-&gt;data[h-&gt;size] = value;</span><br><span class="line">    <span class="keyword">int</span> current = h-&gt;size;</span><br><span class="line">    <span class="keyword">int</span> father = (current - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (h-&gt;data[current] &gt; h-&gt;data[father]) &#123;</span><br><span class="line">        swap(&amp;h-&gt;data[current], &amp;h-&gt;data[father]);</span><br><span class="line">        current = father;</span><br><span class="line">        father = (current - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    h-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Heap *h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h-&gt;size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,  h-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">(Heap *h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h-&gt;data[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Heap *h, <span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lchild = <span class="number">2</span> * pos + <span class="number">1</span>, rchild = <span class="number">2</span> * pos + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> max_value = pos;</span><br><span class="line">    <span class="keyword">if</span> (lchild &lt; n &amp;&amp; h-&gt;data[lchild] &gt; h-&gt;data[max_value]) &#123;</span><br><span class="line">        max_value = lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rchild &lt; n &amp;&amp; h-&gt;data[rchild] &gt; h-&gt;data[max_value]) &#123;</span><br><span class="line">        max_value = rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (max_value != pos) &#123;</span><br><span class="line">        swap(&amp;h-&gt;data[pos], &amp;h-&gt;data[max_value]);</span><br><span class="line">        update(h, max_value, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(Heap *h)</span> </span>&#123;</span><br><span class="line">    swap(&amp;h-&gt;data[<span class="number">0</span>], &amp;h-&gt;data[h-&gt;size - <span class="number">1</span>]);</span><br><span class="line">    h-&gt;size--;</span><br><span class="line">    update(h, <span class="number">0</span>, h-&gt;size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请在下面实现堆排序函数 heap_sort</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(Heap *h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h-&gt;size - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        swap(&amp;h-&gt;data[i], &amp;h-&gt;data[<span class="number">0</span>]);</span><br><span class="line">        update(h, <span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Heap *h)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(h-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">12</span>, <span class="number">9</span>, <span class="number">30</span>, <span class="number">24</span>, <span class="number">30</span>, <span class="number">4</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">22</span>, <span class="number">37</span> &#125;;</span><br><span class="line">    Heap *heap = (Heap *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Heap));</span><br><span class="line">    init(heap, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        push(heap, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    output(heap);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, top(heap));</span><br><span class="line">    pop(heap);</span><br><span class="line">    output(heap);</span><br><span class="line">    heap_sort(heap);</span><br><span class="line">    output(heap);</span><br><span class="line">    clear(heap);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性建堆-堆排序"><a href="#线性建堆-堆排序" class="headerlink" title="线性建堆-堆排序"></a>线性建堆-堆排序</h2><blockquote><p>  上面入堆操作是<strong>从下向上</strong>，每次进来一个放堆尾，再去维护，维护时反复跟父节点比较，Olog(n)</p></blockquote><blockquote><p>  初始化建堆：</p><p>  其实可以直接把所有元素先放数组里再一起去建堆，这时采用上面删除元素时<strong>自上而下</strong>的操作，从第n/2个元素到第一个元素每个元素(即非叶子节点)进行<strong>自上而下</strong>操作(下虑)，即反复让其与两个子节点比较直到不满足条件，所有点操作完就建好了一个堆O(n)</p></blockquote><blockquote><p>  维护堆(重建堆)：</p><p>  堆排序和建堆相同的操作，只不过这次是去维护堆，每次将堆顶元素(最值元素)跟倒数第i位交换堆就破环了再去将堆顶元素自上而下下虑维护堆，依次将所有堆顶元素放到后面就完成了排序nlog(n)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(a, b) &#123;\</span></span><br><span class="line">    __typeof(a) __temp = a;\</span><br><span class="line">    a = b; b = __temp;\</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> ind, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//int temp = ind;      //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx写循环内</span></span><br><span class="line">    <span class="keyword">while</span>((ind &lt;&lt; <span class="number">1</span>) &lt;= n) &#123; <span class="comment">//xxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line">        <span class="keyword">int</span> temp = ind, l = ind * <span class="number">2</span>, r = ind * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[l] &gt; arr[temp]) &#123;</span><br><span class="line">            temp = l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r &lt;= n &amp;&amp; arr[r] &gt; arr[temp]) &#123; <span class="comment">//xxxxxxxx</span></span><br><span class="line">            temp = r;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span>(temp == ind) <span class="keyword">break</span>;   <span class="comment">//xxxxxxxxxxxxxxxxxxxxxxx漏写</span></span><br><span class="line"></span><br><span class="line">        swap(arr[ind], arr[temp]);</span><br><span class="line">        ind = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    arr -= <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//初建堆</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n &gt;&gt; <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        updata(arr, i, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序重建堆</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">        swap(arr[i], arr[<span class="number">1</span>]);</span><br><span class="line">        updata(arr, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">int</span> n, val;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> *arr = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        val = rand() % <span class="number">100</span>;</span><br><span class="line">        arr[i] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    output(arr, n);</span><br><span class="line">    heap_sort(arr, n);</span><br><span class="line">    output(arr, n);</span><br><span class="line">    <span class="built_in">free</span>(arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>其实就是堆</p><table><thead><tr><th align="center">普通队列</th><th align="center">(最大/最小)堆</th></tr></thead><tbody><tr><td align="center">尾部入队</td><td align="center">尾部可以插入</td></tr><tr><td align="center">头部入队</td><td align="center">头部可以弹出</td></tr><tr><td align="center">先进先出</td><td align="center">每次出对权值(最大/最小的元素)</td></tr><tr><td align="center">数组实现</td><td align="center">数组实现，逻辑上看成堆</td></tr></tbody></table><hr><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><blockquote><p>  1.<strong>直接寻址法</strong>。取关键字或关键字的某个线性函数值为散列地址。即H(key)=key或H(key) = a·key + b，其中a和b为常数（这种散列函数叫做自身函数）</p><p>  2.<strong>数字分析法</strong>。分析一组数据，比如一组员工的出生年月日，这时我们发现出生年月日的前几位数字大体相同，这样的话，出现冲突的几率就会很大，但是我们发现年月日的后几位表示月份和具体日期的数字差别很大，如果用后面的数字来构成散列地址，则冲突的几率会明显降低。因此数字分析法就是找出数字的规律，尽可能利用这些数据来构造冲突几率较低的散列地址。</p><p>  3.<strong>平方取中法。</strong>取关键字平方后的中间几位作为散列地址。</p><p>  4.<strong>折叠法。</strong>将关键字分割成位数相同的几部分，最后一部分位数可以不同，然后取这几部分的叠加和（去除进位）作为散列地址。</p><p>  5.<strong>随机数法</strong>。选择一随机函数，取关键字作为随机函数的种子生成随机值作为散列地址，通常用于关键字长度不同的场合。</p><p>  6.<strong>除留余数法</strong>。取关键字被某个不大于表长m的数p除后所得的余数为散列地址。即 $H(key) = key % p,p&lt;=m$.不仅可以对关键字直接取模，也可在折叠、平方取中等运算之后取模。对p的选择很重要，一般取素数或m，若p选的不好，容易产生碰撞。</p></blockquote><h2 id="解决冲突的办法"><a href="#解决冲突的办法" class="headerlink" title="解决冲突的办法"></a>解决冲突的办法</h2><blockquote><p>  <strong>1. 开放定址法</strong>(常用)</p><p>  如果发⽣冲突，那么就使⽤某种策略寻找下⼀存储地址，直到找到⼀个不冲突的地址或者找到关键字，否则⼀直按这种策略继续寻找。如果冲突次数达到了上限则终⽌程序，表⽰关键字不存在哈希表⾥。常⻅的策略有这⼏种：</p><blockquote><ol><li>线性探测法，如果当前的冲突位置为 d，那么接下来⼏个探测地址为d + 1，d + 2,  等，也就是从冲突地址往后⾯⼀个⼀个探测</li><li>线性补偿探测法，它形成的探测地址为 d + m，d + 2 * m ，d + 3 * m等，与线性探测法不同，这⾥的查找单位不是 1，而是 m，为了能遍历到哈希表⾥所有位置，我们设置m 和表⻓szie互质；</li><li>随机探测法，这种⽅法和前两种⽅法类似，这⾥的查找单位不是⼀个固定值，而是⼀个随机序列。</li><li>⼆次探测法，它形成的探测地址为 d + 1^2，d - 1^2 ，d + 2^2，d - 2^2 等，这种⽅法在冲突位置左右跳跃着寻找探测地址。</li></ol></blockquote><p>  <strong>2. 拉链法</strong>(常用)</p><p>  该⽅法将所有哈希地址相同的结点构成⼀个单链表，单链表的头结点存在哈希数组⾥。链地址法常出现在经常插⼊和删除的情况下。优点：不会出现“堆聚”现象，哈希地址不同的关键字不会发⽣冲突；不需要重建哈希表，在开放地址法中，如果哈希表⾥存满关键字了就需要扩充哈希表然后重建哈希表</p><p>  <strong>3. 再哈希法</strong></p><p>  Hi=RHi(key),i=1,2,…，k RHi均是不同的散列函数，即在同义词产生地址冲突时计算另一个散列函数地址，直到冲突不再发生，这种方法不易产生“聚集”，但增加了计算时间。</p><p>  <strong>4. 建立公共溢出区</strong></p><p>  冲突次数大于表长的一般时认为堆聚，需要重建</p><blockquote><p>  1.开辟一段和当前哈希表等大的临时存储空间。</p><p>  ​    2.将原哈希表里的关键字一一复制到临时数组里。</p><p>  ​    3.申请一个大小是现在两倍的新的存储空间，释放原空间。</p><p>  ​    4.将新空间里的存储地址初始化。</p><p>  ​    5.将关键字从临时数组复制到新的空间，释放临时空间。</p></blockquote></blockquote><h2 id="字符串哈希函数"><a href="#字符串哈希函数" class="headerlink" title="字符串哈希函数"></a>字符串哈希函数</h2><blockquote><p>   常见字符串哈希函数：<strong>BKDRHash ， APHash ， DJBHash ， JSHash ， RSHash</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BKDRHash 法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BKDRHash</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> seed = <span class="number">31</span>, hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; i++) hash = hash * seed + str[i];</span><br><span class="line">    <span class="keyword">return</span> hash &amp; <span class="number">0x7fffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拉链法写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *str;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashTable</span> &#123;</span></span><br><span class="line">    Node **data;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">&#125; HashTable;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">init_node</span><span class="params">(<span class="keyword">char</span> *str, Node *head)</span> </span>&#123;</span><br><span class="line">    Node *p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;str = strdup(str);</span><br><span class="line">    p-&gt;next = head;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">HashTable *<span class="title">init_hashtable</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    HashTable *h = (HashTable *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashTable));</span><br><span class="line">    h-&gt;size = n &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    h-&gt;data = (Node **)<span class="built_in">calloc</span>(h-&gt;size, <span class="keyword">sizeof</span>(Node *));</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BKDRHash</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> seed = <span class="number">31</span>, hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; i++) hash = hash * seed + str[i];</span><br><span class="line">    <span class="keyword">return</span> hash &amp; <span class="number">0x7fffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(HashTable *h, <span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hash = BKDRHash(str);</span><br><span class="line">    <span class="keyword">int</span> ind = hash % h-&gt;size;</span><br><span class="line">    h-&gt;data[ind] = init_node(str, h-&gt;data[ind]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(HashTable *h, <span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hash = BKDRHash(str);</span><br><span class="line">    <span class="keyword">int</span> ind = hash % h-&gt;size;</span><br><span class="line">    Node *p = h-&gt;data[ind];</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; <span class="built_in">strcmp</span>(p-&gt;str, str)) p = p-&gt;next; <span class="comment">//条件不能出错xxxxxxxxxxx</span></span><br><span class="line">    <span class="keyword">return</span> p != <span class="literal">NULL</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_node</span><span class="params">(Node *node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    Node *p = node, *q;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p-&gt;str);</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_hashtable</span><span class="params">(HashTable *h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h-&gt;size; i++) clear_node(h-&gt;data[i]);</span><br><span class="line">    <span class="built_in">free</span>(h-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(h);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> op;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> max_n 100</span></span><br><span class="line">    <span class="keyword">char</span> str[max_n + <span class="number">5</span>];</span><br><span class="line">    HashTable *h = init_hashtable(max_n + <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%s&quot;</span>, &amp;op, str)) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;insert %s to hash to table\n&quot;</span>, str);</span><br><span class="line">               insert(h, str);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;search %s from has table result = %d\n&quot;</span>, str, search(h, str));</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clear_hashtable(h);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="稳定排序："><a href="#稳定排序：" class="headerlink" title="稳定排序："></a>稳定排序：</h2><blockquote><p>  常见稳定排序:<strong>插入排序，冒泡排序，归并排序</strong></p></blockquote><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><blockquote><p>  <strong>基本思想：</strong>是将线性表分为已排序的前半部分和待排序的后半部分，从待排序部分选出第⼀个元素，插⼊到已排序部分的对应位置中，直到全部记录都插⼊到已排序部分中。总体时间复杂度O(n^2);</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20160304/3eca19c223fd1d9bffaff6a240fbbac00c400b84.gif"></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><blockquote><p>  <strong>基本思想：</strong>将n个元素比较$n - 1$趟，每一趟比较$n - i$次(即待排元素个数减一)，每一趟都将待排中最大的排到了最后面。时间复杂度O(n^2)</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20160304/044b7de55573d738ad71c7820f628a76df26d6c9.gif"></p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><blockquote><p>  <strong>基本思想：</strong>将两个有序表合成一个有序表，两个有序表如何得到？将原表从中间分成两半，递归的求两边，最后进行一下合并。归并一共进行$O(logn)$层归并，每层时间复杂度$O(n)$,总体时间复杂度$O(nlogn)$,每次合并时要开辟临时空间存储，然后再复制过去，空间复杂度$O(n)$</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20160303/012e9ba7cd5dcbc4f0ccb7caa185e4f9769d29ed.gif"></p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(a, b) &#123;\</span></span><br><span class="line">    a ^= b; b ^= a; a ^= b;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> *num, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; num[j] &lt; num[j<span class="number">-1</span>]; j--) &#123;</span><br><span class="line">            swap(num[j], num[j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> *num, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> times = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n &amp;&amp; times; i++) &#123;</span><br><span class="line">        times = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[j] &gt; num[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                swap(num[j], num[j + <span class="number">1</span>]);</span><br><span class="line">                times++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> *num, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//if(l == r) return ;</span></span><br><span class="line">    <span class="keyword">if</span>(r - l &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(r - l == <span class="number">1</span> &amp;&amp; num[l] &gt; num[r]) &#123;</span><br><span class="line">            swap(num[l], num[r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    merge_sort(num, l, mid);</span><br><span class="line">    merge_sort(num, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> *temp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (r - l + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">int</span> p1 = l, p2 = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p1 &lt;= mid || p2 &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p2 &gt; r || (p1 &lt;= mid &amp;&amp; num[p1] &lt;= num[p2])) &#123;</span><br><span class="line">            temp[k++] = num[p1++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[k++] = num[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(num + l, temp, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (r - l + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非稳定排序："><a href="#非稳定排序：" class="headerlink" title="非稳定排序："></a>非稳定排序：</h2><blockquote><p>  常见的不稳定排序算法有<strong>选择排序(selection sort)、快速排序(quick sort)、堆排序(heap sort)、希尔排序(shell sort)</strong></p></blockquote><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><blockquote><p>  <strong>基本思想：</strong>分成已排序区(在前)和待排序区,每次从待排序区中找出最小的放已排序的最后面即放在待排序的第一位。或这样理解，一趟都将待排序区的最小值放最前面(跟待排序第一个数交换)，待排序区的元素每趟都会少一个。因为在找待排序区中最小元素时都是将后面的元素跟第一个比较，找到后跟第一个数交换位置，因此可知会打乱后面与第一个数相等的数他俩的相对位置，所以选择排序是<strong>不稳定</strong>的。也有可能第一个数就是待排区中的最小的数，这时候在写swap函数时就不能用异或运算来写，同一个地址的元素异或交换就变成0了。时间复杂度O(n^2)</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20160304/9c965158bc6178ef603ade226071fabb9a624a67.gif" alt="img"></p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><blockquote><p>  <strong>基本思想：</strong>选一个基准值,利用双指针将所有小于基准值的元素放到左边，所有大于基准值的元素放到右边，再递归的将左右两边元素分别排序。平均时间复杂度O(log(n)),最坏O(n^2)</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20160304/7a3c9a32f9e675cab345ef47dcd9c0db087105f8.gif" alt="img"></p><p><strong>代码</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(a, b) &#123;\</span></span><br><span class="line">    __typeof(a) __temp = a;\</span><br><span class="line">    a = b; b = __temp;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数测试框架，稳定排序一样用法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST(arr, n, func, args...) &#123;\</span></span><br><span class="line">    <span class="keyword">int</span> *num = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);\</span><br><span class="line">    <span class="built_in">memcpy</span>(num, arr, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);\</span><br><span class="line">    output(num, n);\</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s = &quot;</span>, #func);\</span><br><span class="line">    func(args);\</span><br><span class="line">    output(num, n);\ </span><br><span class="line">    <span class="built_in">free</span>(num);\</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span> *num, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> ind = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[j] &lt; num[ind]) ind = j;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(num[i], num[ind]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> *num, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r &lt; l) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> x = l, y = r, pivot = num[l];</span><br><span class="line">    <span class="keyword">while</span>(x &lt; y) &#123;</span><br><span class="line">        <span class="comment">//先从右边开始找第一个小于Pivot的值</span></span><br><span class="line">        <span class="keyword">while</span>(x &lt; y &amp;&amp; num[y] &gt;= pivot) y--;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; y) num[x++] = num[y];</span><br><span class="line">        <span class="keyword">while</span>(x &lt; y &amp;&amp; num[x] &lt;= pivot) x++;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; y) num[y--] = num[x];</span><br><span class="line">    &#125;</span><br><span class="line">    num[x] = pivot;</span><br><span class="line">    quick_sort(num, l, x - <span class="number">1</span>);</span><br><span class="line">    quick_sort(num, x + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">randint</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(n--) arr[n] = rand() % <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> *num, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[ &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, num[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> max_op 15</span></span><br><span class="line">    <span class="keyword">int</span> arr[max_op];</span><br><span class="line">    randint(arr, max_op);</span><br><span class="line">    TEST(arr, max_op, select_sort, num, max_op);</span><br><span class="line">    TEST(arr, max_op, quick_sort, num, <span class="number">0</span>, max_op - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="二分查找："><a href="#二分查找：" class="headerlink" title="二分查找："></a>二分查找：</h2><p>解决的是将问题规模减小</p><ol><li><p><strong>普通情况：</strong></p><p>在有序序列找一个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 3 5 7 9 10 ......</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search1</span><span class="params">(<span class="keyword">int</span> *num, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">0</span>, tail = n - <span class="number">1</span>, mid;</span><br><span class="line">    <span class="keyword">while</span>(head &lt;= tail) &#123;</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(num[mid] == x) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(num[mid] &lt; x) head = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> tail = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p><strong><code>000000011111</code>情况:</strong></p><p>找第一个1的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search2</span><span class="params">(<span class="keyword">int</span> *num, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">0</span>, tail = n, mid; <span class="comment">// 一定存在答案的话，应该可以tail = n - 1开始。。</span></span><br><span class="line">    <span class="keyword">while</span>(head &lt; tail) &#123;</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span>; <span class="comment">//重点注意</span></span><br><span class="line">        <span class="keyword">if</span>(num[mid] == <span class="number">1</span>) tail = mid;</span><br><span class="line">        <span class="keyword">else</span> head = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head == n ? <span class="number">-1</span> : head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>① $mid = (head + tail) / 2$</p><pre><code>如果此时0 0 0 0 0 0 1 1 1 1         ↑ ↑          l r下一次 mid = (l + r) / 2 == l更新 r = mid = l;正好得到答案不会死循环，所以求 mid 时 l + r 不用再加111111110000的情况则不同(下面分析)</code></pre><p>② $head = mid + 1$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">000000011111</span><br><span class="line">     ↑</span><br><span class="line">head &#x3D; mid + 1;</span><br><span class="line"></span><br><span class="line">如果此时 mid 指向的是0那么他一定不是答案，所以舍去 mid 及前面的</span><br></pre></td></tr></table></figure><p>③ $tail = mid$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">000000011111</span><br><span class="line">         ↑</span><br><span class="line">tail &#x3D; mid;</span><br><span class="line"></span><br><span class="line">如果此时 mid 指向的是1那么他 有可能 是答案，所以留下 mid， 舍弃mid后面的</span><br></pre></td></tr></table></figure></li><li><p><strong><code>111111111100000</code>情况</strong></p><p>求最后一个1的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search3</span><span class="params">(<span class="keyword">int</span> *num, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">-1</span>, tail = n - <span class="number">1</span>, mid; <span class="comment">//一定存在答案的话，应该可以head = 0开始。。</span></span><br><span class="line">    <span class="keyword">while</span>(head &lt; tail) &#123;</span><br><span class="line">        mid = (head + tail + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>; <span class="comment">//重点关注</span></span><br><span class="line">        <span class="keyword">if</span>(num[mid] == <span class="number">1</span>) &#123;</span><br><span class="line">            head = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> tail = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>① $mid = (head + tail + 1) / 2$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">如果此时</span><br><span class="line">1 1 1 1 1 1 1 1 0 0 0 0</span><br><span class="line">              ↑ ↑</span><br><span class="line">              l r</span><br><span class="line"></span><br><span class="line">如果 mid &#x3D; (l + r) &#x2F; 2;</span><br><span class="line">那么下一次 mid &#x3D; (l + r) &#x2F; 2 &#x3D;&#x3D; l;</span><br><span class="line">      更新 l &#x3D; mid &#x3D; l; l 还是 l这时就会死循环</span><br><span class="line">      </span><br><span class="line">所以应该 mid &#x3D; (head + tail + 1) &#x2F; 2；</span><br></pre></td></tr></table></figure><p>② $head = mid$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">11111110000000000000</span><br><span class="line">     ↑</span><br><span class="line">head &#x3D; mid;</span><br><span class="line"></span><br><span class="line">如果此时 mid 指向的 1 ,那么他有可能是答案，所以舍去 mid 前面的，留下 mid</span><br></pre></td></tr></table></figure><p>③ $tail = mid$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1111110000000</span><br><span class="line">         ↑</span><br><span class="line">tail &#x3D; mid - 1;</span><br><span class="line"></span><br><span class="line">如果此时 mid 指向的是 0 那么他一定不是答案，所以舍弃 mid 及后面的</span><br></pre></td></tr></table></figure></li></ol><h2 id="三分查找："><a href="#三分查找：" class="headerlink" title="三分查找："></a>三分查找：</h2><blockquote><p>  在一个单调函数中，用二分查找精确求解中某一点的值。如果函数是一个 凸性函数（在某一点左侧，函数递增，在该点右侧，函数递减，该点称为极大值点）或者 凹性函数（在某一点左侧，函数递减，在该点右侧，函数递增，该点称为极小值点）求最值就要用到三分查找</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9ruuRqcnNAV3NASo_298_349.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222421617606380%22%7D&bizType=im&open_id=742721380" alt="img"></p><pre><code> 三分查找每次比较后，都会将区间长度缩小到原来的$2/3$  。时间复杂度Olog(n);</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//凸函数代码</span></span><br><span class="line"><span class="comment">//凹函数只需要把10，16行大于改成小于即可</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_max</span><span class="params">(<span class="keyword">int</span> *data, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right =length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(right - left &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> m1 = left + (right - left) / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> m2 = right - (right - left + <span class="number">2</span>) / <span class="number">3</span>; <span class="comment">//尽量让m2靠近极值点</span></span><br><span class="line">        <span class="keyword">if</span>(data[m1] &gt;= data[m2]) &#123;</span><br><span class="line">            right = m2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = m1 + <span class="number">1</span>;<span class="comment">//尽量让m1靠近极值点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(data[left] &gt;= data[right]) &#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, find_max(a, <span class="number">5</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="平衡二叉查找树"><a href="#平衡二叉查找树" class="headerlink" title="平衡二叉查找树"></a>平衡二叉查找树</h1><h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><p>又称二叉搜索树</p><blockquote><p>  **左子树 &lt; 根结点 **  </p><p>  <strong>右子树 &gt; 根结点</strong></p><p>  用途: <strong>解决排名相关的检索需求</strong></p><p>  ⼆叉查找树插⼊查找的效率都是 O(log n)，最坏情况下是 O(n)</p></blockquote><h3 id="二叉查找树插入"><a href="#二叉查找树插入" class="headerlink" title="二叉查找树插入"></a>二叉查找树插入</h3><blockquote><p>   小于根结点插左子树，大于根结点插右子树</p></blockquote><h3 id="二叉查找树删除"><a href="#二叉查找树删除" class="headerlink" title="二叉查找树删除"></a>二叉查找树删除</h3><blockquote><ol><li><p><strong>删除叶子节点</strong></p></li><li><p><strong>删除出度为1的节点</strong></p><p>如图删除3</p><p><img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rw5rAP50dA_116_116.png_620x10000q90g.jpg?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222456832909739%22%7D&bizType=im&open_id=742721380" alt="图片">         ➡         <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rw6Kb8Btdg_118_109.png_620x10000q90g.jpg?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222460273104549%22%7D&bizType=im&open_id=742721380" alt="图片"></p></li><li><p><strong>删除出度为2的节点</strong></p><p>先找到前驱或后继，然后替换后转换为出度为1的节点问题</p><p>如图删除20</p><p> <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rw8TRfV0zI0_141_116.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222450865983941%22%7D&bizType=im&open_id=742721380" alt="img">➡<img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rw8TRxBvzIc_135_111.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222457232501317%22%7D&bizType=im&open_id=742721380" alt="img">➡ <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rw8ZDHJ0zI4_142_116.png_620x10000q90g.jpg?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222450929783642%22%7D&bizType=im&open_id=742721380" alt="图片">➡ <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rw8ZDUtyzIY_134_114.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222450929862141%22%7D&bizType=im&open_id=742721380" alt="img"></p></li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">getNewNode</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    Node *p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;key = key;</span><br><span class="line">    p-&gt;lchild = p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">insert</span><span class="params">(Node *root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> getNewNode(key);</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;key == key) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span>(key &lt; root-&gt;key) root-&gt;lchild = insert(root-&gt;lchild, key);</span><br><span class="line">    <span class="keyword">else</span> root-&gt;rchild = insert(root-&gt;rchild, key);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">predecessor</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    Node *temp = root-&gt;lchild;</span><br><span class="line">    <span class="keyword">while</span>(temp-&gt;rchild) temp = temp-&gt;rchild;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除节点重要！</span></span><br><span class="line"><span class="function">Node *<span class="title">erase</span><span class="params">(Node *root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span>(key &lt; root-&gt;key) root-&gt;lchild = erase(root-&gt;lchild, key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; root-&gt;key) root-&gt;rchild = erase(root-&gt;rchild, key);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//度为一或0</span></span><br><span class="line">        <span class="keyword">if</span>(root-&gt;lchild == <span class="literal">NULL</span> || root-&gt;rchild == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            Node *temp = root-&gt;lchild ? root-&gt;lchild : root-&gt;rchild;</span><br><span class="line">            <span class="built_in">free</span>(root);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//度为2的节点</span></span><br><span class="line">            Node *temp = predecessor(root);</span><br><span class="line">            root-&gt;key = temp-&gt;key;</span><br><span class="line">            root-&gt;lchild = erase(root-&gt;lchild, temp-&gt;key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __in_order(Node *root) &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    __in_order(root-&gt;lchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, root-&gt;key);</span><br><span class="line">    __in_order(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in_order</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;in order output: &quot;</span>);</span><br><span class="line">    __in_order(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">    clear(root-&gt;lchild);</span><br><span class="line">    clear(root-&gt;rchild);</span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> op, val;</span><br><span class="line">    Node *root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;op, &amp;val)) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                root = insert(root, val);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                root = erase(root, val);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        in_order(root);</span><br><span class="line">    &#125;</span><br><span class="line">    clear(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="平衡二叉查找树-1"><a href="#平衡二叉查找树-1" class="headerlink" title="平衡二叉查找树"></a>平衡二叉查找树</h2><h3 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h3><ol><li><p><strong>平衡条件</strong>：每个节点左右子树最大高度差不超过1</p></li><li><p><strong>四种旋转操作：</strong></p><ol><li>LL型</li><li>LR型：首先是左子树比右子树高度差为2了，又左子树的右子树比左子树的左子树高，此时需要先站在左孩子处进行小左旋，再站在当前节点进行大右旋</li><li>RL型</li><li>RR型</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDhJzsOG6K6PNB4_NApY_662_1935.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%22742721380:742721380%22,%22msgId%22:%223631777592062%22%7D&bizType=im&open_id=742721380" alt="img"></p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H(root) (root)-&gt;h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L(root) (root)-&gt;l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R(root) (root)-&gt;r</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K(root) (root)-&gt;key</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key, h;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">l</span>, *<span class="title">r</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line">Node __NIL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIL (&amp;__NIL)</span></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_NIL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    NIL-&gt;key = NIL-&gt;h = <span class="number">0</span>;</span><br><span class="line">    NIL-&gt;l = NIL-&gt;r = NIL;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">getNewNode</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    Node *p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;key = key;</span><br><span class="line">    p-&gt;h = <span class="number">1</span>;</span><br><span class="line">    p-&gt;l = p-&gt;r = NIL;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_height</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    root-&gt;h = H(L(root))&gt; H(R(root)) ? H(L(root)) : H(R(root)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">left_rotate</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    Node *temp = root-&gt;r;</span><br><span class="line">    root-&gt;r = temp-&gt;l;</span><br><span class="line">    temp-&gt;l = root;</span><br><span class="line">    update_height(root);</span><br><span class="line">    update_height(temp);</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">right_rotate</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    Node *temp = root-&gt;l;</span><br><span class="line">    root-&gt;l = temp-&gt;r;</span><br><span class="line">    temp-&gt;r = root;</span><br><span class="line">    update_height(root);</span><br><span class="line">    update_height(temp);</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">maintain</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(H(L(root)) - H(R(root))) &lt;= <span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (H(L(root)) &gt; H(R(root))) &#123;</span><br><span class="line">        <span class="keyword">if</span>(H(R(L(root))) &gt; H(L(L(root)))) &#123;</span><br><span class="line">            root-&gt;l = left_rotate(root-&gt;l);</span><br><span class="line">        &#125;</span><br><span class="line">        root = right_rotate(root);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(H(L(R(root))) &gt; H(R(R(root)))) &#123;</span><br><span class="line">            root-&gt;l = right_rotate(root-&gt;l);</span><br><span class="line">        &#125;</span><br><span class="line">        root = left_rotate(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">insert</span><span class="params">(Node *root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> getNewNode(key);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;key == key) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;key &gt; key) &#123;</span><br><span class="line">        root-&gt;l = insert(root-&gt;l, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> root-&gt;r = insert(root-&gt;r, key);</span><br><span class="line">    update_height(root);  <span class="comment">//插入一节点就要更新树高</span></span><br><span class="line">    <span class="keyword">return</span> maintain(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> ;</span><br><span class="line">    clear(root-&gt;l);</span><br><span class="line">    clear(root-&gt;r);</span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">Node *<span class="title">predeccessor</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    Node *temp = root-&gt;l;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;r != NIL) temp = temp-&gt;r;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node *<span class="title">erase</span><span class="params">(Node *root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;key &gt; key) root-&gt;l = erase(root-&gt;l, key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;key &lt; key) &#123;</span><br><span class="line">        root-&gt;r = erase(root-&gt;r, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;l == NIL || root-&gt;r == NIL) &#123;</span><br><span class="line">            Node *temp = root-&gt;l == NIL ? root-&gt;r : root-&gt;l;</span><br><span class="line">            <span class="built_in">free</span>(root);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node *temp = predeccessor(root);</span><br><span class="line">            root-&gt;key = temp-&gt;key;</span><br><span class="line">            root-&gt;l = erase(root-&gt;l, temp-&gt;key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      update_height(root);</span><br><span class="line">    <span class="keyword">return</span> maintain(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(%d %d %d)\n&quot;</span>, K(root), K(L(root)), K(R(root)));</span><br><span class="line">    output(root-&gt;l);</span><br><span class="line">    output(root-&gt;r);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MAX_OP 20</span></span><br><span class="line">    Node *root = NIL;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_OP; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = rand() % <span class="number">100</span>;</span><br><span class="line">        root = insert(root, val);</span><br><span class="line">    &#125;</span><br><span class="line">    output(root);</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;val)) &#123;</span><br><span class="line">        root = erase(root, val);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;erase %d from tree&quot;</span>, val);</span><br><span class="line">        output(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><h4 id="五个平衡条件"><a href="#五个平衡条件" class="headerlink" title="五个平衡条件"></a>五个平衡条件</h4><ul><li>每个结点要么是红色，要么是黑色；</li><li>根结点是黑色；</li><li>叶结点（NIL）是黑色；</li><li>如果一个结点是红色，则它的两个子节点都是黑色的；</li><li>从根结点出发到所有叶结点的路径上，均包含相同数目的黑色结点。</li></ul><p><strong>提示：调整时要明确哪些点的颜色是确定的哪些是不确定的，调整前后要保证这个子树上面的黑色数量没有改变</strong></p><h4 id="插入调整-两种情况"><a href="#插入调整-两种情况" class="headerlink" title="插入调整(两种情况)"></a>插入调整(两种情况)</h4><p>==站在祖父节点往下看是否有颜色冲突(看儿子和孙子是不是同时为红色)==</p><h5 id="叔叔红"><a href="#叔叔红" class="headerlink" title="叔叔红"></a>叔叔红</h5><blockquote><p>   <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDiQ3LK3lWhnM2M0BzQ_461_216.png_620x10000q90g.jpg?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%22742721380:742721380%22,%22msgId%22:%224064208514998%22%7D&bizType=im&open_id=742721380" alt="图片"></p><p>   方案：直接红上顶</p><p>   <img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20170111/ad621d7d3ab7553d8aaa5a1cfae8ac332ad5c3ca.png" alt="img"></p></blockquote><h5 id="叔叔黑-我位置有4种情况"><a href="#叔叔黑-我位置有4种情况" class="headerlink" title="叔叔黑(我位置有4种情况)"></a>叔叔黑(我位置有4种情况)</h5><blockquote><p>   <strong>LR型</strong>：先小左旋(注意观察小左旋并不影响路径上黑色节点数量)，转化为LL型</p><p>   <img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20170111/63cf075299c91a45765a79983048af2940d97e95.png" alt="img"></p><p>   <img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20170111/0642f1714a1f030013d31901f0ced2647cd152d4.png" alt="img"></p><p>   <strong>LL型</strong>：直接大右旋，再调帽子为红黑黑或黑红红</p><p>   <img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20170111/cdf89cf1677f650776bf0d4440e5ef42ad6438fc.png" alt="img"></p><p>   <strong>RR、RL和上面一样</strong></p></blockquote><h4 id="删除调整-三种情况"><a href="#删除调整-三种情况" class="headerlink" title="删除调整(三种情况)"></a>删除调整(三种情况)</h4><p><strong>删除操作站在父节点往下看</strong></p><p>分析删除只有一个孩子的结点的情况：如果要删除的结点 x 为红色，那么这个结点的父结点和子结点都一定是黑色，因此，只需要把子结点直接连向父结点就可以了，不会破坏红黑树的五条规则。如果删除的黑色节点，就需要把该结点下的子树的根结点变为双重黑</p><p>调整操作就是为了干掉双重黑</p><p>其中分兄弟黑和兄弟红，兄弟红可以转为兄弟黑情况，这里主要分兄弟黑的三种情况</p><h5 id="黑兄弟的儿子全黑"><a href="#黑兄弟的儿子全黑" class="headerlink" title="黑兄弟的儿子全黑"></a>黑兄弟的儿子全黑</h5><blockquote><p>  x为双重黑</p><p>   <img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20170117/ed15c408bc20011e52a9dfc148f1aa0507127d35.png" alt="img"></p><p>  方案：黑上浮（当根结点为双重黑时，直接减一就行）</p><p>   <img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20170117/78dd99072d4b8138ba1c8dfd51295c30ca541b9c.png" alt="img"></p></blockquote><h5 id="RR或LL型"><a href="#RR或LL型" class="headerlink" title="RR或LL型"></a>RR或LL型</h5><p>LL黑兄弟是左孩子，黑兄弟的左孩子是只要是红色(不关心另一个孩子颜色)</p><p>RR黑兄弟是右孩子，黑兄弟的右孩子是只要是红色(不关心另一个孩子颜色)</p><blockquote><p>  站在38大左旋，</p><p>   <img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20170117/bcce6388a541eebf4632afdf6ba9bf23c9f0ffd3.png" alt="img"></p><p>  <strong>调色：51调成38的颜色，38和72调成黑色</strong></p><p>   <img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20170117/ce7683bbed82a149e4bdeecf32296905daa05634.png" alt="img"></p></blockquote><h5 id="RL或LR型"><a href="#RL或LR型" class="headerlink" title="RL或LR型"></a>RL或LR型</h5><blockquote><p>   <img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20170117/62b1e7e6946d2b4f0eb6de8b7e7652a0242e5635.png" alt="img"></p><p>   <strong>先小右旋，交换51调黑72调红，变成了RR型</strong></p><p>   <img src= "/img/loading.gif" data-lazy-src="https://res.jisuanke.com/img/upload/20170117/bcce6388a541eebf4632afdf6ba9bf23c9f0ffd3.png" alt="img"></p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLACK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBLACK 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> color; <span class="comment">// 0 red, 1 black, 2 double black</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line">Node __NIL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NIL (&amp;__NIL)</span></span><br><span class="line"></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_NIL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    NIL-&gt;key = <span class="number">0</span>;</span><br><span class="line">    NIL-&gt;lchild = NIL-&gt;rchild = NIL;</span><br><span class="line">    NIL-&gt;color = BLACK;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">getNewNode</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    Node *p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;key = key;</span><br><span class="line">    p-&gt;lchild = p-&gt;rchild = NIL;</span><br><span class="line">    p-&gt;color = RED;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">has_red_child</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> root-&gt;lchild-&gt;color == <span class="number">0</span> || root-&gt;rchild-&gt;color == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">left_rotate</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    Node *temp = root-&gt;rchild;</span><br><span class="line">    root-&gt;rchild = temp-&gt;lchild;</span><br><span class="line">    temp-&gt;lchild = root;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">right_rotate</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    Node *temp = root-&gt;lchild;</span><br><span class="line">    root-&gt;lchild = temp-&gt;rchild;</span><br><span class="line">    temp-&gt;rchild = root;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">insert_maintain</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!has_red_child(root)) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild-&gt;color == RED &amp;&amp; root-&gt;rchild-&gt;color == RED) &#123;</span><br><span class="line">        root-&gt;color = RED;</span><br><span class="line">        root-&gt;lchild-&gt;color = root-&gt;rchild-&gt;color = BLACK;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild-&gt;color == RED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!has_red_child(root-&gt;lchild)) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;lchild-&gt;rchild-&gt;color == RED) &#123;</span><br><span class="line">            root-&gt;lchild = left_rotate(root-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        root = right_rotate(root);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!has_red_child(root-&gt;rchild)) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;rchild-&gt;lchild-&gt;color == RED) &#123;</span><br><span class="line">            root-&gt;rchild = right_rotate(root-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">        root = left_rotate(root);</span><br><span class="line">    &#125;</span><br><span class="line">    root-&gt;color = RED;</span><br><span class="line">    root-&gt;lchild-&gt;color = root-&gt;rchild-&gt;color = BLACK;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">predeccessor</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    Node *temp = root-&gt;lchild;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;rchild != NIL) temp = temp-&gt;rchild;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">erase_maintain</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild-&gt;color != DBLACK &amp;&amp;</span><br><span class="line">        root-&gt;rchild-&gt;color != DBLACK) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (has_red_child(root)) &#123;</span><br><span class="line">        root-&gt;color = RED;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;lchild-&gt;color == RED) &#123;</span><br><span class="line">            root = right_rotate(root);</span><br><span class="line">            root-&gt;rchild = erase_maintain(root-&gt;rchild);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root = left_rotate(root);</span><br><span class="line">            root-&gt;lchild = erase_maintain(root-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;color = BLACK;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((root-&gt;lchild-&gt;color == DBLACK &amp;&amp; !has_red_child(root-&gt;rchild)) ||</span><br><span class="line">        (root-&gt;rchild-&gt;color == DBLACK &amp;&amp; !has_red_child(root-&gt;lchild))) &#123;</span><br><span class="line">        root-&gt;color += <span class="number">1</span>;</span><br><span class="line">        root-&gt;lchild-&gt;color -= <span class="number">1</span>;</span><br><span class="line">        root-&gt;rchild-&gt;color -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;rchild-&gt;color == BLACK) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;rchild-&gt;rchild-&gt;color != RED) &#123;</span><br><span class="line">            root-&gt;rchild-&gt;color = RED;</span><br><span class="line">            root-&gt;rchild = right_rotate(root-&gt;rchild);</span><br><span class="line">            root-&gt;rchild-&gt;color = BLACK;</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;rchild-&gt;color = root-&gt;color;</span><br><span class="line">        root-&gt;color = BLACK;</span><br><span class="line">        root-&gt;lchild-&gt;color -= <span class="number">1</span>;</span><br><span class="line">        root = left_rotate(root);</span><br><span class="line">        root-&gt;rchild-&gt;color = BLACK;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;lchild-&gt;lchild-&gt;color != RED) &#123;</span><br><span class="line">            root-&gt;lchild-&gt;color = RED;</span><br><span class="line">            root-&gt;lchild = left_rotate(root-&gt;lchild);</span><br><span class="line">            root-&gt;lchild-&gt;color = BLACK;</span><br><span class="line">        &#125;</span><br><span class="line">        root-&gt;lchild-&gt;color = root-&gt;color;</span><br><span class="line">        root-&gt;color = BLACK;</span><br><span class="line">        root-&gt;rchild-&gt;color -= <span class="number">1</span>;</span><br><span class="line">        root = right_rotate(root);</span><br><span class="line">        root-&gt;lchild-&gt;color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *__erase(Node *root, <span class="keyword">int</span> key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;key &gt; key) &#123;</span><br><span class="line">        root-&gt;lchild = __erase(root-&gt;lchild, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;key &lt; key) &#123;</span><br><span class="line">        root-&gt;rchild = __erase(root-&gt;rchild, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;lchild == NIL || root-&gt;rchild == NIL) &#123;</span><br><span class="line">            Node *temp = root-&gt;lchild == NIL ? root-&gt;rchild : root-&gt;lchild;</span><br><span class="line">            temp-&gt;color += root-&gt;color;</span><br><span class="line">            <span class="built_in">free</span>(root);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node *temp = predeccessor(root);</span><br><span class="line">            root-&gt;key = temp-&gt;key;</span><br><span class="line">            root-&gt;lchild = __erase(root-&gt;lchild, temp-&gt;key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> erase_maintain(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">erase</span><span class="params">(Node *root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    root = __erase(root, key);</span><br><span class="line">    root-&gt;color = BLACK;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *__insert(Node *root, <span class="keyword">int</span> key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> getNewNode(key);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;key == key) <span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;key &gt; key) &#123;</span><br><span class="line">        root-&gt;lchild = __insert(root-&gt;lchild, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root-&gt;rchild = __insert(root-&gt;rchild, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> insert_maintain(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">insert</span><span class="params">(Node *root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    root = __insert(root, key);</span><br><span class="line">    root-&gt;color = BLACK;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> ;</span><br><span class="line">    clear(root-&gt;lchild);</span><br><span class="line">    clear(root-&gt;rchild);</span><br><span class="line">    <span class="built_in">free</span>(root);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == NIL) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(%d | %d, %d, %d)\n&quot;</span>,</span><br><span class="line">        root-&gt;color,</span><br><span class="line">        root-&gt;key,</span><br><span class="line">        root-&gt;lchild-&gt;key,</span><br><span class="line">        root-&gt;rchild-&gt;key</span><br><span class="line">    );</span><br><span class="line">    output(root-&gt;lchild);</span><br><span class="line">    output(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> op, val;</span><br><span class="line">    Node *root = NIL;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;op, &amp;val)) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: root = insert(root, val); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: root = erase(root, val); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        output(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><blockquote><p>  解决连通性问题</p><p>   <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxNxnerNAVDM1A_212_336.png_620x10000q90g.jpg?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222453825710638%22%7D&bizType=im&open_id=742721380" alt="图片"><img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxOBt7zNAVfNATE_305_343.png_620x10000q90g.jpg?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222453825748618%22%7D&bizType=im&open_id=742721380" alt="图片"></p></blockquote><blockquote><p>  <strong>MAKE—SET(x)：初始化操作：建立一个只包含x的元素，每个元素开始都是指向自己</strong></p><p>  <strong>FIND—SET(x) 查询操作：找到x所在的集合</strong></p><p>  <strong>UNION(x, y) 合并操作：将两棵树合并</strong></p><p>  <strong><img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxHQ3_jMx80Bzg_462_199.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222460224223659%22%7D&bizType=im&open_id=742721380" alt="img"></strong></p></blockquote><blockquote><p>  <strong>不加优化的并查集，最坏情况森林会退化成链表，查询时间复杂度为O(N)</strong></p></blockquote><h3 id="Quick-Find"><a href="#Quick-Find" class="headerlink" title="Quick-Find"></a>Quick-Find</h3><blockquote><p>  将所有连通的即属于同一集合的元素都染成代表元素的颜色，在树中就是都指向最终根结点，路径压缩就是这样子</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">UnionSet</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *color;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">&#125; UnionSet;</span><br><span class="line"></span><br><span class="line"><span class="function">UnionSet *<span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    UnionSet *u = (UnionSet *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(UnionSet));</span><br><span class="line">    u-&gt;color = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n + <span class="number">1</span>));</span><br><span class="line">    u-&gt;n = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        u-&gt;color[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(UnionSet *u, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> u-&gt;color[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(UnionSet *u, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(find(u, a) == find(u, b)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> color_a = u-&gt;color[a];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= u-&gt;n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(u-&gt;color[i] - color_a) <span class="keyword">continue</span>;</span><br><span class="line">        u-&gt;color[i] = u-&gt;color[b];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Quick-Union"><a href="#Quick-Union" class="headerlink" title="Quick-Union"></a>Quick-Union</h3><blockquote><blockquote><p>  <strong>解释：[x, y], 将x所在集合连通到y所在集合, x所在集合的代表为X，y所在集合的代表为Y，a[X] = Y</strong></p></blockquote><p>  例：用Quick-Union算法求的下面十个点最终数组结果</p><p>   <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxLBpdLMk80DYw_867_147.png_620x10000q90g.jpg?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222460064600293%22%7D&bizType=im&open_id=742721380" alt="图片"></p><p>   <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxLUTUpszQFs_364_108.png_620x10000q90g.jpg?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222460784414992%22%7D&bizType=im&open_id=742721380" alt="图片">画成树：<img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxLUTznMlX0_125_149.png_620x10000q90g.jpg?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222460880076369%22%7D&bizType=im&open_id=742721380" alt="图片"></p><blockquote><p>  缺点：这样规定x做孩子连在y下面,极端情况下会退化成链表，优化看Weighted Quick-Union</p></blockquote></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">UnionSet</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *father;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">&#125; UnionSet;</span><br><span class="line"></span><br><span class="line"><span class="function">UnionSet *<span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    UnionSet *u = (UnionSet *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(UnionSet));</span><br><span class="line">    u-&gt;father = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n + <span class="number">1</span>));</span><br><span class="line">    u-&gt;n = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        u-&gt;father[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(UnionSet *u, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;father[x] == x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> find(u, u-&gt;father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(UnionSet *u, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa = find(u, a), fb = find(u, b);</span><br><span class="line">    <span class="keyword">if</span>(fa == fb) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    u-&gt;father[fa] = fb;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Weighted-Quick-Union"><a href="#Weighted-Quick-Union" class="headerlink" title="Weighted Quick-Union"></a>Weighted Quick-Union</h3><blockquote><blockquote><p>  这就是：<strong>按秩合并</strong></p><p>  解释：[x, y], 将x所在集合和y所在集合合并, 秩小的做孩子，秩大的做父亲</p></blockquote><p>  秩是按照<strong>节点数量</strong>比较还是<strong>树的高度</strong>比较呢？ ➟    <strong>节点数量</strong></p><p>  通俗理解：像下面这种情况，就应该将树二接到树一下面，这样查询效率更高</p><p>  <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxMx5GddzO4_238_93.png_620x10000q90g.jpg?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222463521382001%22%7D&bizType=im&open_id=742721380" alt="图片"><img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxMx5CdNzPM_243_77.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222463537261583%22%7D&bizType=im&open_id=742721380" alt="img"></p><p>  公式推倒：$l_i$ 表示第$i$个点查询的次数，所有点查询总次数除以节点总数就是平均查找次数</p><p>   <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxMwQXjNATjNArw_700_312.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222463521224164%22%7D&bizType=im&open_id=742721380" alt="img"></p><p>  可知应该根据节点数量将节点少的接在节点数量多得树下面</p><p>  例：分别写出下面用Quick-Union和Weighted Quick-Union得到的数组最终结果</p><p>  <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxNB0vdgzQNk_868_96.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222453665810180%22%7D&bizType=im&open_id=742721380" alt="img"></p><p>  <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxNRp17M-s0E5Q_1253_250.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222453665939911%22%7D&bizType=im&open_id=742721380" alt="img"></p><p>   <img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxNRp_HNAhfNBKQ_1188_535.png_620x10000q90g.jpg?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222453665981181%22%7D&bizType=im&open_id=742721380" alt="图片"></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(a, b) &#123;\</span></span><br><span class="line">    __typeof(a) __temp = a;\</span><br><span class="line">    a = b; b = __temp;\</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">UnionSet</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *father, *size;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">&#125; UnionSet;</span><br><span class="line"></span><br><span class="line"><span class="function">UnionSet *<span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    UnionSet *u = (UnionSet *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(UnionSet));</span><br><span class="line">    u-&gt;father = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n + <span class="number">1</span>));</span><br><span class="line">    u-&gt;size = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n + <span class="number">1</span>));</span><br><span class="line">    u-&gt;n = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        u-&gt;father[i] = i;</span><br><span class="line">        u-&gt;size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(UnionSet *u, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(u-&gt;father[x] == x) <span class="keyword">return</span> x;</span><br><span class="line">      <span class="keyword">return</span> find(u, u-&gt;father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(UnionSet *u, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa = find(u, a), fb = find(u, b);</span><br><span class="line">    <span class="keyword">if</span> (fa == fb) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (u-&gt;size[fa] &lt; u-&gt;size[fb]) swap(fa, fb);</span><br><span class="line">    u-&gt;father[fb] = fa;</span><br><span class="line">    u-&gt;size[fa] += u-&gt;size[fb];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Weighted-Quick-Union-With-Path-Compression"><a href="#Weighted-Quick-Union-With-Path-Compression" class="headerlink" title="Weighted Quick-Union With Path Compression"></a>Weighted Quick-Union With Path Compression</h3><blockquote><p>  将所有点都指向它最终的根结点(它所在集合的代表元素)就是路径压缩，如上右图的0指向3</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(a, b) &#123;\</span></span><br><span class="line">    __typeof(a) __temp = a;\</span><br><span class="line">    a = b; b = __temp;\</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">UnionSet</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *father, *size;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">&#125; UnionSet;</span><br><span class="line"></span><br><span class="line"><span class="function">UnionSet *<span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    UnionSet *u = (UnionSet *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(UnionSet));</span><br><span class="line">    u-&gt;father = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n + <span class="number">1</span>));</span><br><span class="line">    u-&gt;size = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n + <span class="number">1</span>));</span><br><span class="line">    u-&gt;n = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        u-&gt;father[i] = i;</span><br><span class="line">        <span class="comment">//u-&gt;size[i] = 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(UnionSet *u, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> u-&gt;father[x] = (u-&gt;father[x] == x ? x : find(u, u-&gt;father[x]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(UnionSet *u, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa = find(u, a), fb = find(u, b);</span><br><span class="line">    <span class="keyword">if</span> (fa == fb) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//if (u-&gt;size[fa] &lt; u-&gt;size[fb]) swap(fa, fb);</span></span><br><span class="line">    u-&gt;father[fb] = fa;</span><br><span class="line">    <span class="comment">//u-&gt;size[fa] += u-&gt;size[fb];</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度比较"><a href="#复杂度比较" class="headerlink" title="复杂度比较"></a>复杂度比较</h3><p><img src= "/img/loading.gif" data-lazy-src="https://static.dingtalk.com/media/lALPDgQ9rxNg9krNAUPNBbY_1462_323.png?auth_bizType=IM&auth_bizEntity=%7B%22cid%22:%224248001:742721380%22,%22msgId%22:%222463713273714%22%7D&bizType=im&open_id=742721380" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DisjointSet</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *father, *rank;</span><br><span class="line">&#125; DisjointSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(DisjointSet *s, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    s-&gt;father = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * size);</span><br><span class="line">    s-&gt;rank = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        s-&gt;father[i] = i;</span><br><span class="line">        s-&gt;rank[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_set</span><span class="params">(DisjointSet *s, <span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;father[node] != node) &#123;</span><br><span class="line">        s-&gt;father[node] = find_set(s, s-&gt;father[node]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;father[node];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(DisjointSet *s, <span class="keyword">int</span> node1, <span class="keyword">int</span> node2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ancestor1 = find_set(s, node1);</span><br><span class="line">    <span class="keyword">int</span> ancestor2 = find_set(s, node2);</span><br><span class="line">    <span class="keyword">if</span> (ancestor1 != ancestor2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;rank[ancestor1] &gt; s-&gt;rank[ancestor2]) &#123;</span><br><span class="line">            swap(&amp;ancestor1, &amp;ancestor2);</span><br><span class="line">        &#125;</span><br><span class="line">        s-&gt;father[ancestor1] = ancestor2;</span><br><span class="line">        s-&gt;rank[ancestor2] = max(s-&gt;rank[ancestor2], s-&gt;rank[ancestor1] + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(DisjointSet *s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(s-&gt;father);</span><br><span class="line">    <span class="built_in">free</span>(s-&gt;rank);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DisjointSet *dsu = (DisjointSet *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DisjointSet));</span><br><span class="line">    init(dsu, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">int</span> m, x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">int</span> ans = merge(dsu, x, y);</span><br><span class="line">        <span class="keyword">if</span> (ans) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;success\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;failed\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clear(dsu);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DisjointSet</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *father, *rank;</span><br><span class="line">&#125;DisjointSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(DisjointSet *s, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    s-&gt;father = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * size);</span><br><span class="line">    s-&gt;rank = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        s-&gt;father[i] = i;</span><br><span class="line">        s-&gt;rank[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_set</span><span class="params">(DisjointSet *s, <span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;father[node];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(DisjointSet *s, <span class="keyword">int</span> node1, <span class="keyword">int</span> node2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ancestor1 = find_set(s, node1);</span><br><span class="line">    <span class="keyword">int</span> ancestor2 = find_set(s, node2);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (ancestor1 != ancestor2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;rank[ancestor1] &gt; s-&gt;rank[ancestor2]) &#123;</span><br><span class="line">            swap(&amp;ancestor1, &amp;ancestor2);</span><br><span class="line">        &#125;</span><br><span class="line">        s-&gt;father[ancestor1] = ancestor2;</span><br><span class="line">        s-&gt;rank[ancestor2] = max(s-&gt;rank[ancestor2], s-&gt;rank[ancestor1] + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//s-&gt;rank[ancestor2] += s-&gt;rank[ancestor1];</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(DisjointSet *s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(s-&gt;father);</span><br><span class="line">    <span class="built_in">free</span>(s-&gt;rank);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    DisjointSet *s = (DisjointSet *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DisjointSet));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    init(s, m);</span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        merge(s, a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, find_set(s, i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/06/1.hello-world/"/>
      <url>/2020/08/06/1.hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>About me</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>一名无名小卒</p></blockquote><p>qq: 32849549879<br>shouji: 123153465</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>留下你的想法~</title>
      <link href="/messageboard/index.html"/>
      <url>/messageboard/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>那些年，我们听过的音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>那些年，我们拍过的回忆</title>
      <link href="/photos/index.html"/>
      <url>/photos/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/tags/photos/index.css"/>
      <url>/tags/photos/index.css</url>
      
        <content type="html"><![CDATA[.test {width: 500px;    height: 200px;    background-color: red;}.iframe {}.audio {    margin:auto;    width: 350px;    height: 90px;}.player-mid .mask {    background: #fff;}.img-box1 {    margin: auto;    width: 80%;}.img1 {    width: 100%;    height: 350px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>相册</title>
      <link href="/tags/photos/index.html"/>
      <url>/tags/photos/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="index.css"><hr><blockquote><p>那么爱他</p></blockquote><iframe class="iframe" frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=114389&auto=0&height=66"></iframe><div class="audio"> <embed src="//music.163.com/style/swf/widget.swf?sid=1442859784&type=2&auto=1&width=320&height=66" width="350" height="86"  allowNetworking="all"></embed></div><div class="img-box1"> <img class="img1" src= "/img/loading.gif" data-lazy-src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1596726669923&di=b6a5d8e1bcb609c885a1c8923d999ed7&imgtype=0&src=http%3A%2F%2Fattach.bbs.miui.com%2Fforum%2F201303%2F18%2F233119quyrec7to3ws3rco.jpg" alt=""></div>]]></content>
      
    </entry>
    
    
  
</search>
